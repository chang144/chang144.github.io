(window.webpackJsonp=window.webpackJsonp||[]).push([[10],{285:function(t,s,e){"use strict";e.r(s);var a=e(14),r=Object(a.a)({},(function(){var t=this,s=t._self._c;return s("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[s("h1",{attrs:{id:"深入理解dockerfile"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#深入理解dockerfile"}},[t._v("#")]),t._v(" 深入理解dockerfile")]),t._v(" "),s("p",[t._v("learn from")]),t._v(" "),s("ul",[s("li",[s("p",[s("a",{attrs:{href:"https://juejin.cn/post/7179042892395053113",target:"_blank",rel:"noopener noreferrer"}},[t._v("一篇文章带你吃透 Dockerfile - 掘金 (juejin.cn)"),s("OutboundLink")],1)])]),t._v(" "),s("li",[s("p",[s("a",{attrs:{href:"https://docs.docker.com/engine/reference/builder/",target:"_blank",rel:"noopener noreferrer"}},[t._v("Dockerfile reference"),s("OutboundLink")],1)])]),t._v(" "),s("li",[s("p",[s("a",{attrs:{href:"https://juejin.cn/post/7042663735156015140",target:"_blank",rel:"noopener noreferrer"}},[t._v("全网最详细的Docker-Compose详细教程 - 掘金 (juejin.cn)"),s("OutboundLink")],1)])]),t._v(" "),s("li",[s("p",[s("a",{attrs:{href:"https://zhuanlan.zhihu.com/p/387840381",target:"_blank",rel:"noopener noreferrer"}},[t._v("docker compose 配置文件 .yml 全面指南 - 知乎 (zhihu.com)"),s("OutboundLink")],1)])]),t._v(" "),s("li",[s("p",[s("a",{attrs:{href:"https://github.com/compose-spec/compose-spec/blob/master/spec.md",target:"_blank",rel:"noopener noreferrer"}},[t._v("compose-spec/spec.md at master · compose-spec/compose-spec · GitHub"),s("OutboundLink")],1)])])]),t._v(" "),s("h2",{attrs:{id:"前言"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#前言"}},[t._v("#")]),t._v(" 前言")]),t._v(" "),s("hr"),t._v(" "),s("p",[t._v("学习Dockers前期，通过Docker的官方镜像仓库拉取里面的镜像，根据这些镜像创建出容器并运行")]),t._v(" "),s("p",[t._v("实际上，Docker官方镜像也是通过一定的方式构建出来的，只要弄清其中的逻辑，我们也可以仿照官方镜像的构建过程，构建出自己的镜像")]),t._v(" "),s("p",[s("code",[t._v("Dockerfile")]),t._v("就是这样一个用于描述Docker镜像构建过程的文本文件，dockerfile可以包含多条构建指令，以及相关的描述")]),t._v(" "),s("h3",{attrs:{id:"_1-什么是容器"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_1-什么是容器"}},[t._v("#")]),t._v(" 1.什么是容器")]),t._v(" "),s("p",[t._v("容器是计算机上的沙盒进程，与主机上的其它进程隔离，这种隔离利用了"),s("code",[t._v("内核命名空间和cgroups")]),t._v("。简而言之容器是：")]),t._v(" "),s("ul",[s("li",[t._v("是"),s("code",[t._v("image")]),t._v("的可运行实例")]),t._v(" "),s("li",[t._v("可以在本地计算机、虚拟机上运行或部署到云中")]),t._v(" "),s("li",[t._v("是可移植的")]),t._v(" "),s("li",[t._v("与其它容器隔离，并运行自己的软件，二进制文件和配置")])]),t._v(" "),s("h3",{attrs:{id:"_2-什么是容器映射"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_2-什么是容器映射"}},[t._v("#")]),t._v(" 2.什么是容器映射")]),t._v(" "),s("p",[t._v("当容器运行时，它使用了隔离的文件系统。这个自定义的文件系统由容器映像"),s("code",[t._v("container image")]),t._v("提供。因为image包含了容器的问价系统，使用image必须包含所有的运行应用程序所必须的所有东西——依赖项、配置、脚本、二进制文件等等。")]),t._v(" "),s("blockquote",[s("p",[t._v("沙盒进程是指在计算机系统中，为了保障安全和隔离性而采用的一种技术，将应用程序运行在一个受限制的环境中，限制它们能访问的资源和操作范围，从而避免恶意程序和授权程序对系统的破坏")])]),t._v(" "),s("h3",{attrs:{id:"_3-容器是怎么运行的"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_3-容器是怎么运行的"}},[t._v("#")]),t._v(" 3.容器是怎么运行的")]),t._v(" "),s("p",[t._v("当一个容器运行时，它为其文件系统使用来image的各个层。每个容器都有自己的命名空间来创建/更新/删除文件。在另一个容器中不会看到任何更改，即使它们使用相同的image")]),t._v(" "),s("h3",{attrs:{id:"_4-容器卷-container-volumes"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_4-容器卷-container-volumes"}},[t._v("#")]),t._v(" 4.容器卷[container volumes]")]),t._v(" "),s("p",[t._v("每个容器启动时都是从容器的定义开始的。在容器中可以创建、更新和删除文件，但当容器被删除时，这些改变将回丢失，所有更变都被隔离在各个容器中")]),t._v(" "),s("p",[t._v("卷：提供了将容器的特定文件系统路径链路到主机的能力。如果在主机上的某个文件被挂载，那么当容器中该文件路径下的文件发送更改时，我们在主机上同样也可以看到更改。同样的，启动另一个挂载了同一个文件目录的容器，它也可以访问到相同的文件")]),t._v(" "),s("h2",{attrs:{id:"镜像构建原理"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#镜像构建原理"}},[t._v("#")]),t._v(" 镜像构建原理")]),t._v(" "),s("hr"),t._v(" "),s("h3",{attrs:{id:"_1-docker架构模式"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_1-docker架构模式"}},[t._v("#")]),t._v(" 1.Docker架构模式")]),t._v(" "),s("p",[s("img",{attrs:{src:"https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/e33ce775404146daa01bc0d385cc2cee~tplv-k3u1fbpfcp-zoom-in-crop-mark:4536:0:0:0.awebp",alt:"img"}})]),t._v(" "),s("p",[s("code",[t._v("docker")]),t._v("使用了"),s("strong",[t._v("client")]),t._v("/"),s("strong",[t._v("server")]),t._v("的架构模式。构建镜像时，用户在"),s("strong",[t._v("dockers")]),t._v(" "),s("strong",[t._v("client")]),t._v("输入构建命令。"),s("strong",[t._v("docker")]),t._v("引擎以 "),s("code",[t._v("REST API")]),t._v("的形式，像 "),s("strong",[t._v("docker")]),t._v(" "),s("strong",[t._v("daemon")]),t._v("发送构建请求，如何dockers daemon就根据构建请求的内容，开始镜像构建的工作，并向Client持续放回构建过程的信息。")]),t._v(" "),s("h3",{attrs:{id:"_2-镜像分层模型"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_2-镜像分层模型"}},[t._v("#")]),t._v(" 2.镜像分层模型")]),t._v(" "),s("hr"),t._v(" "),s("p",[s("strong",[t._v("docker")]),t._v("镜像是用于创建容器的只读模板，是通过 "),s("strong",[t._v("Dockerfile")]),t._v("中定义的指令构建而成的，构建结束后，会在原有的镜像层上生成一个新的镜像层，如下所示")]),t._v(" "),s("p",[s("img",{attrs:{src:"https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/51e63bbb613a4676859d1a041762fe9b~tplv-k3u1fbpfcp-zoom-in-crop-mark:4536:0:0:0.awebp",alt:"img"}})]),t._v(" "),s("p",[t._v("在 tomcat 镜像创建一个容器后，会在tomcat镜像之上新创建一个可写的容器层，在容器中写文件时，会保存到这个容器层中")]),t._v(" "),s("p",[s("img",{attrs:{src:"https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/c27b2dee8b754753b6da6b71d9864e4b~tplv-k3u1fbpfcp-zoom-in-crop-mark:4536:0:0:0.awebp",alt:"img"}})]),t._v(" "),s("h3",{attrs:{id:"_3-基础镜像与父级镜像"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_3-基础镜像与父级镜像"}},[t._v("#")]),t._v(" 3.基础镜像与父级镜像")]),t._v(" "),s("hr"),t._v(" "),s("p",[t._v("用于构建基础镜像的 "),s("strong",[t._v("Dockerfile")]),t._v(" 不指定父级镜像，Docker约定使用如下形式基础镜像")]),t._v(" "),s("div",{staticClass:"language-dockerfile extra-class"},[s("pre",{pre:!0,attrs:{class:"language-dockerfile"}},[s("code",[s("span",{pre:!0,attrs:{class:"token instruction"}},[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("FROM")]),t._v(" scratch")]),t._v("\n")])])]),s("p",[t._v("这里的 "),s("code",[t._v("scratch")]),t._v("是一个空镜像，可以从零开始构建镜像，常用来构建最小镜像，如"),s("code",[t._v("busybox")]),t._v("，"),s("code",[t._v("debian")]),t._v("，"),s("code",[t._v("alpine")]),t._v("等镜像，省去很多linux命令，因此很小。一般，不需要自己去构建基础镜像。")]),t._v(" "),s("p",[t._v("构建自定义镜像时，通过"),s("strong",[t._v("FROM")]),t._v("指定使用说明父级镜像。例如，官方的"),s("strong",[t._v("tomcat")]),t._v("命令没有yum，vim等命令，但是我们可以将"),s("strong",[t._v("tomcat")]),t._v("镜像作为父级镜像，然后安装想要的命令，这样在容器中就可以使用了。")]),t._v(" "),s("p",[s("img",{attrs:{src:"https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/ba55ae94bfb144cfa68b43aa7e19372e~tplv-k3u1fbpfcp-zoom-in-crop-mark:4536:0:0:0.awebp",alt:"img"}})]),t._v(" "),s("h3",{attrs:{id:"_4-构建上下文-build-context"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_4-构建上下文-build-context"}},[t._v("#")]),t._v(" 4.构建上下文 / build context")]),t._v(" "),s("hr"),t._v(" "),s("p",[s("strong",[t._v("Client")]),t._v(" 向 "),s("strong",[t._v("Docker")]),t._v(" "),s("strong",[t._v("daemon")]),t._v(" 发送的构架请求包含两部分，第一部分是 "),s("strong",[t._v("Dockerfile")]),t._v("文件，第二部分是"),s("strong",[t._v("构建上下文")])]),t._v(" "),s("p",[t._v("构建上下文是一些文件集合，这些文件可以是指定路径下的文件，也可以是远程资源中指定路径下的文件，在构建过程中，Docker daemon 可以访问这些文件，并执行相应的操作[理解：访问配置文件]")]),t._v(" "),s("ul",[s("li",[t._v("路径上下文")])]),t._v(" "),s("p",[t._v("构建命令中指定具体路径，该路径下的所有文件即为构建上下文，这些文件被打包送给Docker daemon中，然后被解压")]),t._v(" "),s("p",[t._v("假使一个项目的文件结构如下")]),t._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[t._v("demo\n|--Dockerfile\n|--src\n|--test\n|--node_modules\n")])])]),s("p",[t._v("在项目根目录执行下面的构建命令")]),t._v(" "),s("div",{staticClass:"language-dockerfile extra-class"},[s("pre",{pre:!0,attrs:{class:"language-dockerfile"}},[s("code",[t._v("docker build -t img-tag .\n")])])]),s("p",[t._v("构建请求的第一部分是"),s("strong",[t._v("Dockerfile")]),t._v("，这个文件在当前目录下，文件是默认名称，因此省略，")]),t._v(" "),s("p",[t._v("相当于默认加上了 "),s("strong",[t._v("-f Dockerfile")]),t._v(", 该Dockerfile内容如下")]),t._v(" "),s("div",{staticClass:"language-dockerfile extra-class"},[s("pre",{pre:!0,attrs:{class:"language-dockerfile"}},[s("code",[s("span",{pre:!0,attrs:{class:"token instruction"}},[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("FROM")]),t._v(" busybox")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token instruction"}},[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("WORKDIR")]),t._v(" /src")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token instruction"}},[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("COPY")]),t._v(" src .")]),t._v("\n")])])]),s("p",[t._v("构建请求的第二部分是 "),s("code",[t._v(".")]),t._v("这个点代表当前，此时当前目录就是此次的构建的上下文，Docker引擎会整理该目录下的所有文件，把不被 "),s("code",[t._v(".dockerignore")]),t._v("中的规则所的文件都发送到Docker daemon中，如下所示")]),t._v(" "),s("p",[s("img",{attrs:{src:"https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/f19f34eb288545db8023ef3fbc34e64f~tplv-k3u1fbpfcp-zoom-in-crop-mark:4536:0:0:0.awebp",alt:"img"}})]),t._v(" "),s("p",[t._v("如果此时位于项目根目录的上一级目录，构建命令如下")]),t._v(" "),s("div",{staticClass:"language-dockerfile extra-class"},[s("pre",{pre:!0,attrs:{class:"language-dockerfile"}},[s("code",[t._v("docker build -t img-tag -f ./demo/Dockerfile ./demo/\n")])])]),s("ul",[s("li",[t._v("URL上下文")])]),t._v(" "),s("p",[t._v("Docker 还支持利用远程仓库URL构建镜像，此时指定的远程仓库目录就充当了构建上下文")]),t._v(" "),s("div",{staticClass:"language-bash extra-class"},[s("pre",{pre:!0,attrs:{class:"language-bash"}},[s("code",[s("span",{pre:!0,attrs:{class:"token function"}},[t._v("docker")]),t._v(" build https://gitee.com:user/my-repo.git"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("#master:docker")]),t._v("\n")])])]),s("p",[t._v("以上构建命令指定了一个 Gitee 项目的 master 分支，冒号（:）之前是 Git 检出的目标 URL, 冒号之后的 docker 是远程仓库根目录下的一个子目录，此时这个子目录就是构建上下文")]),t._v(" "),s("p",[t._v("Docker client 执行构建命令时，Docker 引擎首先会将远程仓库的 master 分支拉取到本地的一个临时目录中，然后将其中的 docker 目录下的文件作为构建上下文发送到 Docker daemon 中。拉取远程文件之后，又回到了路径上下文的步骤，如下图所示")]),t._v(" "),s("p",[s("img",{attrs:{src:"https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/4d2402bdb96547cb8245d4300435417c~tplv-k3u1fbpfcp-zoom-in-crop-mark:4536:0:0:0.awebp",alt:"img"}})]),t._v(" "),s("ul",[s("li",[t._v("省略上下文")])]),t._v(" "),s("p",[t._v("如果 Dockerfile 中的指令不需要对任何文件进行操作，可以省略构建上下文，此时不会向 Docker daemon 发送额外的文件，这可以提高构建速度")]),t._v(" "),s("div",{staticClass:"language-dockerfile extra-class"},[s("pre",{pre:!0,attrs:{class:"language-dockerfile"}},[s("code",[t._v("docker build -t my-hello-world:latest -<<EOF\n"),s("span",{pre:!0,attrs:{class:"token instruction"}},[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("FROM")]),t._v(" busybox")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token instruction"}},[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("RUN")]),t._v(" echo "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"hello world"')])]),t._v("\nEOF\n")])])]),s("h3",{attrs:{id:"_5-构建缓存"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_5-构建缓存"}},[t._v("#")]),t._v(" 5.构建缓存")]),t._v(" "),s("hr"),t._v(" "),s("p",[t._v("迭代过程中，Dockerfile对于的资源会被经常修改，因此需要频繁重新构建镜像，Docker为了提高构建速度，设计了多种优化方案，其中最重要的是"),s("strong",[t._v("构建缓存")])]),t._v(" "),s("p",[t._v("示例：说明构建缓存是如何工作的，Dockerfile如下")]),t._v(" "),s("div",{staticClass:"language-dockerfile extra-class"},[s("pre",{pre:!0,attrs:{class:"language-dockerfile"}},[s("code",[s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# syntax=docker/dockerfile:1")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token instruction"}},[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("FROM")]),t._v(" ubuntu:latest")]),t._v("\n\n"),s("span",{pre:!0,attrs:{class:"token instruction"}},[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("RUN")]),t._v(" apt-get update && apt-get install -y build-essentials")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token instruction"}},[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("COPY")]),t._v(" main.c Makefile /src/")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token instruction"}},[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("WORKDIR")]),t._v(" /src/")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token instruction"}},[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("RUN")]),t._v(" make build")]),t._v("\n")])])]),s("p",[t._v("镜像构建过中，dockerfile 中的指令会从上往下执行，每一个构建步骤的结果都会被缓存起来，例如")]),t._v(" "),s("p",[s("img",{attrs:{src:"https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/46f1ef9ec967422cb9bd204762fd2da1~tplv-k3u1fbpfcp-zoom-in-crop-mark:4536:0:0:0.awebp",alt:"img"}})]),t._v(" "),s("p",[t._v("此时再次构建，会直接使用缓存中的结果(Using cache)")]),t._v(" "),s("p",[t._v("这里假设修改了main.c 中的代码，再次构建时，从 "),s("code",[t._v("COPY main Makefile /src/")]),t._v("这条指令开始，后续构建缓存都会失效，如下图所示")]),t._v(" "),s("p",[s("img",{attrs:{src:"https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/8ca255ce38314bad88310df01679268a~tplv-k3u1fbpfcp-zoom-in-crop-mark:4536:0:0:0.awebp",alt:"img"}})]),t._v(" "),s("p",[t._v("如果不想使用构建缓存，执行构建命令时，可以传入 "),s("code",[t._v("--no-cahe")])]),t._v(" "),s("h3",{attrs:{id:"_6-镜像构建过程"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_6-镜像构建过程"}},[t._v("#")]),t._v(" 6.镜像构建过程")]),t._v(" "),s("p",[t._v("Docker Client 执行构建命令后，会经过以下步骤构建出最终镜像")]),t._v(" "),s("ol",[s("li",[t._v("确定构建上下文，如果构建上下文中有 .dockerignore 文件，解析该文件的匹配规则，将构建上下文中被匹配的文件资源排除")]),t._v(" "),s("li",[t._v("将 Dockerfile 和构建上下文发送给 Docker daemon")]),t._v(" "),s("li",[t._v("Docker daemon 收到构建请求。以下的步骤都由 Docker daemon 完成，省略主语")]),t._v(" "),s("li",[t._v("逐条校验 Dockerfile 中的指令是否合法，如果不合法，立即结束构建。这一步可以确定一共有多少个构建步骤，便于后续分步构建时显示当前步骤，如 "),s("strong",[t._v("Step 1/2")])]),t._v(" "),s("li",[t._v("逐条执行 Dockerfile 中的指令，每条指令都新创建一层。会生成临时 container 用于执行命令，该步骤结束后删除临时容器")]),t._v(" "),s("li",[t._v("生成最终镜像")])]),t._v(" "),s("h2",{attrs:{id:"dockerignore"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#dockerignore"}},[t._v("#")]),t._v(" .dockerignore")]),t._v(" "),s("hr"),t._v(" "),s("p",[t._v("这个文件需要遵循一定的语法规则")]),t._v(" "),s("ol",[s("li",[t._v("以 # 开头的行是备注，不会被解析为匹配规则")]),t._v(" "),s("li",[t._v("支持 ? 通配符，匹配单个字符")]),t._v(" "),s("li",[t._v("支持 * 通配符，匹配多个字符，只能匹配单级目录")]),t._v(" "),s("li",[t._v("支持 ** 通配符，可匹配多级目录")]),t._v(" "),s("li",[t._v("支持 ! 匹配符，声明某些文件资源不需要被排除")]),t._v(" "),s("li",[t._v("可以用 .dockerignore 排除 Dockerfile 和 .dockerignore 文件。Docker Client 仍然会将这两个文件发送到 Docker daemon，因为 Docker 底层需要。但 ADD 和 COPY 指令就无法操作这两个文件了")])]),t._v(" "),s("p",[t._v("示例：")]),t._v(" "),s("div",{staticClass:"language-.dockerignore extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[t._v("# this is a .dockerignore demo\n\n*/demo*\n*/*/demo*\ndemo?\n**/mydemo*\n")])])]),s("h2",{attrs:{id:"dockerfile"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#dockerfile"}},[t._v("#")]),t._v(" Dockerfile")]),t._v(" "),s("hr"),t._v(" "),s("p",[s("strong",[t._v("Dockerfile")]),t._v("时一个用于描述Docekr镜像构建过程的文本文件，包含多条构建指令，以及相关的描述")]),t._v(" "),s("p",[t._v("Dockerfile的构建指令需要遵循如下的语法")]),t._v(" "),s("div",{staticClass:"language-dockerfile extra-class"},[s("pre",{pre:!0,attrs:{class:"language-dockerfile"}},[s("code",[s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# Comment")]),t._v("\nINSTRUCTION arguments\n")])])]),s("p",[t._v("以 "),s("code",[t._v("#")]),t._v("开头的行绝大部分是注释，还有一小部分是解析器指令")]),t._v(" "),s("p",[t._v("构建指令分两个部分，第一部分是指令，第二部分是指令参数。")]),t._v(" "),s("h4",{attrs:{id:"_1-解析器指令-parse-directive"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_1-解析器指令-parse-directive"}},[t._v("#")]),t._v(" 1.解析器指令 / parse directive")]),t._v(" "),s("p",[t._v("解析器指令是以 "),s("code",[t._v("#")]),t._v("开始，用来提示解释器对 Dockerfile进行特殊处理，构建过程中它不会增加镜像层，也不会出现在构建过程")]),t._v(" "),s("p",[t._v("解析器指令是可选的")]),t._v(" "),s("div",{staticClass:"language-dockerfile extra-class"},[s("pre",{pre:!0,attrs:{class:"language-dockerfile"}},[s("code",[s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# directive=value")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 解析器指令需要在空行，注释，构建指令之前")]),t._v("\n")])])]),s("p",[s("strong",[t._v("注意事项")])]),t._v(" "),s("ul",[s("li",[t._v("同一解析器指令不能重复")]),t._v(" "),s("li",[t._v("不区分大小写，按照惯例，推荐小写")]),t._v(" "),s("li",[t._v("空行、注释、构建指令之后，Docker 不再查找解析器指令，都当成注释")]),t._v(" "),s("li",[t._v("按照惯例，解析器指令位于 Dockerfile 的第一行，在后面添加空行")]),t._v(" "),s("li",[t._v("行内的空格被忽略，不支持跨行")])]),t._v(" "),s("p",[t._v("Docker 目前支持两种解析器指令")]),t._v(" "),s("ol",[s("li",[t._v("syntax")]),t._v(" "),s("li",[t._v("escape")])]),t._v(" "),s("p",[s("strong",[t._v("syntax")]),t._v(" 解析器指令，只有使用 "),s("strong",[t._v("BuildKit")]),t._v(" 作为构建器时才生效")]),t._v(" "),s("p",[s("strong",[t._v("escape")]),t._v(" 解析器指令，用于指定在 Dockerfile 中使用转义字符")]),t._v(" "),s("p",[t._v("在 Dockerfile 中，escape 默认为 \\")]),t._v(" "),s("div",{staticClass:"language-dockerfile extra-class"},[s("pre",{pre:!0,attrs:{class:"language-dockerfile"}},[s("code",[s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# escape=\\  ")]),t._v("\n复制代码\n")])])]),s("p",[t._v("但 Windows 系统中的 \\ 是路径分隔符，推荐将 escape 替换为 `，这和 PowerShell 是一致的")]),t._v(" "),s("div",{staticClass:"language-dockerfile extra-class"},[s("pre",{pre:!0,attrs:{class:"language-dockerfile"}},[s("code",[s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# escape=`")]),t._v("\n")])])]),s("h4",{attrs:{id:"_2-常见指令解析"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_2-常见指令解析"}},[t._v("#")]),t._v(" 2.常见指令解析")]),t._v(" "),s("table",[s("thead",[s("tr",[s("th",[t._v("序号")]),t._v(" "),s("th",[t._v("指令名")]),t._v(" "),s("th",[t._v("功能描述")])])]),t._v(" "),s("tbody",[s("tr",[s("td",[t._v("1")]),t._v(" "),s("td",[t._v("FROM")]),t._v(" "),s("td",[t._v("指定基础镜像或者父级镜像")])]),t._v(" "),s("tr",[s("td",[t._v("2")]),t._v(" "),s("td",[t._v("LABEL")]),t._v(" "),s("td",[t._v("为镜像添加元数据")])]),t._v(" "),s("tr",[s("td",[t._v("3")]),t._v(" "),s("td",[t._v("ENV")]),t._v(" "),s("td",[t._v("设置环境变量")])]),t._v(" "),s("tr",[s("td",[t._v("4")]),t._v(" "),s("td",[t._v("WORKDIR")]),t._v(" "),s("td",[t._v("指定后续指令的工作目录，类似于Linux中的cd命令")])]),t._v(" "),s("tr",[s("td",[t._v("5")]),t._v(" "),s("td",[t._v("USER")]),t._v(" "),s("td",[t._v("指定当前构建阶段以及容器运行时的默认用户，以及可选的用户组")])]),t._v(" "),s("tr",[s("td",[t._v("6")]),t._v(" "),s("td",[t._v("VOLUME")]),t._v(" "),s("td",[t._v("创建具有指定名称的挂载数据卷，用于数据持久化")])]),t._v(" "),s("tr",[s("td",[t._v("7")]),t._v(" "),s("td",[t._v("ADD")]),t._v(" "),s("td",[t._v("将构建上下文中指定目录下的文件复制到镜像文件按系统的指定位置")])]),t._v(" "),s("tr",[s("td",[t._v("8")]),t._v(" "),s("td",[t._v("COPY")]),t._v(" "),s("td",[t._v("功能与语法与ADD类似，但是不会自动解压文件，也不能访问网络资源")])]),t._v(" "),s("tr",[s("td",[t._v("9")]),t._v(" "),s("td",[t._v("EXPOSE")]),t._v(" "),s("td",[t._v("约定容器运行时监听的端口，通常用于容器与外界之间的通信")])]),t._v(" "),s("tr",[s("td",[t._v("10")]),t._v(" "),s("td",[t._v("RUN")]),t._v(" "),s("td",[t._v("用于构建镜像过程中执行目录")])]),t._v(" "),s("tr",[s("td",[t._v("11")]),t._v(" "),s("td",[t._v("CMD")]),t._v(" "),s("td",[t._v("构建镜像成功后，所创建的容器启动时执行的命令，常与ENTRYPOINT结合使用")])]),t._v(" "),s("tr",[s("td",[t._v("12")]),t._v(" "),s("td",[t._v("ENTRYPOINT")]),t._v(" "),s("td",[t._v("用于配置容器以可执行的方式运行，常与CMD结合使用")])])])]),t._v(" "),s("p",[s("strong",[t._v("FROM")])]),t._v(" "),s("p",[t._v("指定基础镜像或父级镜像")]),t._v(" "),s("div",{staticClass:"language-dockerfile extra-class"},[s("pre",{pre:!0,attrs:{class:"language-dockerfile"}},[s("code",[t._v("FORM [--platform=<platform>] <image> [AS <name>]\nFORM [--platform=<platform>] <image>[:<tag>] [AS <name>]\nFORM [--platform=<platform>] <image>[@<digest>] [AS <name>]\n")])])]),s("ol",[s("li",[s("code",[t._v("tag")]),t._v("或"),s("code",[t._v("digest")]),t._v("是可选项，默认为"),s("strong",[t._v("latest")]),t._v("版本为基础镜像")]),t._v(" "),s("li",[t._v("如果不以任何镜像为基础，使用："),s("code",[t._v("FORM scratch")]),t._v("."),s("strong",[t._v("scratch")]),t._v("是一个空镜像，用于构建最小镜像")])]),t._v(" "),s("p",[s("strong",[t._v("LABEL")])]),t._v(" "),s("p",[t._v("为镜像添加元数据")]),t._v(" "),s("div",{staticClass:"language-dockerfile extra-class"},[s("pre",{pre:!0,attrs:{class:"language-dockerfile"}},[s("code",[s("span",{pre:!0,attrs:{class:"token instruction"}},[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("LABEL")]),t._v(" <key>=<value> <key>=<value> <key>=<value>...")]),t._v("\n示例:\n"),s("span",{pre:!0,attrs:{class:"token instruction"}},[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("LABEL")]),t._v(" auth="),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"ch"')]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("\\")]),t._v("\n\t  version="),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"1.0.0"')]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("\\")]),t._v("\n\t  decription="),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"Dockerfile"')])]),t._v("\n")])])]),s("ol",[s("li",[t._v("使用"),s("code",[t._v("LABEL")]),t._v("定义键值对结构的元数据，一个"),s("strong",[t._v("LABEL")]),t._v("可指定多个元数据")]),t._v(" "),s("li",[t._v("定义元数据值时，尽量使用双引号")]),t._v(" "),s("li",[t._v("当前镜像可以继承继承镜像或者父级镜像中的元数据时，可以覆盖")]),t._v(" "),s("li",[t._v("可使用以下命令查看元数据")])]),t._v(" "),s("div",{staticClass:"language-dockerfile extra-class"},[s("pre",{pre:!0,attrs:{class:"language-dockerfile"}},[s("code",[t._v("docker image inspect -f='{{json .ContainerConfig.Labels}}' my-image\n")])])]),s("p",[s("strong",[t._v("ENV")])]),t._v(" "),s("p",[t._v("设置环境变量")]),t._v(" "),s("div",{staticClass:"language-dockerfile extra-class"},[s("pre",{pre:!0,attrs:{class:"language-dockerfile"}},[s("code",[s("span",{pre:!0,attrs:{class:"token instruction"}},[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("ENV")]),t._v(" <key>=<value>...")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token instruction"}},[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("ENV")]),t._v(" <key> <value>")]),t._v("\n")])])]),s("ol",[s("li",[t._v("当前镜像可以继承基础镜像或者父级镜像中的环境变量，也可以覆盖")]),t._v(" "),s("li",[t._v("使用"),s("code",[t._v("ENV")]),t._v("指定定义的环境变量，最终会持久化到容器中")]),t._v(" "),s("li",[t._v("运行容器时，可以通过"),s("code",[t._v("--env =")]),t._v("或者"),s("code",[t._v("-e =")]),t._v("覆盖镜像定义中的环境变量")]),t._v(" "),s("li",[t._v("对只使用在镜像构建过程中的变量，推荐使用"),s("code",[t._v("ARG")]),t._v("，或者内环境变量，这样不会被持久化到最终的镜像中")])]),t._v(" "),s("blockquote",[s("p",[t._v("内环境变量示例："),s("code",[t._v('RUN TEMP="no persisit"')])])]),t._v(" "),s("ol",{attrs:{start:"5"}},[s("li",[t._v("查看最终镜像中的环境变量")])]),t._v(" "),s("div",{staticClass:"language-dockerfile extra-class"},[s("pre",{pre:!0,attrs:{class:"language-dockerfile"}},[s("code",[t._v("docker image inspect -f='{{json .ContainerConfig.Env}}' my-image \n")])])]),s("p",[s("strong",[t._v("WORKDIR")])]),t._v(" "),s("p",[t._v("指定后续指令的工作目录，类似"),s("strong",[t._v("linux")]),t._v("中的cd命令")]),t._v(" "),s("div",{staticClass:"language-dockerfile extra-class"},[s("pre",{pre:!0,attrs:{class:"language-dockerfile"}},[s("code",[s("span",{pre:!0,attrs:{class:"token instruction"}},[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("WORKDIR")]),t._v(" /path/to/workdir")]),t._v("\n")])])]),s("p",[t._v("使用Dockerfile中设置的环境变量")]),t._v(" "),s("div",{staticClass:"language-dockerfile extra-class"},[s("pre",{pre:!0,attrs:{class:"language-dockerfile"}},[s("code",[s("span",{pre:!0,attrs:{class:"token instruction"}},[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("ENV")]),t._v(" DIR_PATH=/demo")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token instruction"}},[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("WORKDIR")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token variable"}},[t._v("$DIR_PATH")]),t._v("/"),s("span",{pre:!0,attrs:{class:"token variable"}},[t._v("$DIR_NAME")])]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token instruction"}},[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("RUN")]),t._v(" pwd")]),t._v("\n")])])]),s("p",[t._v("构建镜像时，pwd 的输出结果是 /demo，因为 $DIR_NAME 未显示指定，直接忽略")]),t._v(" "),s("ol",[s("li",[t._v("默认的工作目录是"),s("code",[t._v("/")])]),t._v(" "),s("li",[t._v("可以使用Dockerfile中显示指定的环境变量，包括父级镜像中的环境变量")]),t._v(" "),s("li",[t._v("父级镜像可能设置工作目录，最佳实践是显示设置当前镜像的工作目录")])]),t._v(" "),s("p",[s("strong",[t._v("USER")])]),t._v(" "),s("p",[t._v("指定当前构建阶段以及容器运行时的默认用户，以及可选的用户组")]),t._v(" "),s("div",{staticClass:"language-dockerfile extra-class"},[s("pre",{pre:!0,attrs:{class:"language-dockerfile"}},[s("code",[s("span",{pre:!0,attrs:{class:"token instruction"}},[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("USER")]),t._v(" <user>[:<group>]")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token instruction"}},[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("USER")]),t._v(" <user>[:<GID>]")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token instruction"}},[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("USER")]),t._v(" <UID>[:<group>]")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token instruction"}},[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("USER")]),t._v(" <UID>[:<GID>]")]),t._v("\n")])])]),s("ol",[s("li",[t._v("使用USER指定用户后，Dockerfile中构建镜像的"),s("code",[t._v("RUN")]),t._v(","),s("code",[t._v("CMD")]),t._v(","),s("code",[t._v("ENTRYPOINT")]),t._v("指令都会使用该用户，同时这个用户也是容器运行时的默认用户")]),t._v(" "),s("li",[t._v("不指定用户组，使用默认用户组"),s("strong",[t._v("root")])]),t._v(" "),s("li",[t._v("运行容器时，可以使用"),s("code",[t._v("-u")]),t._v("参数覆盖Dockerfile中默认的用户")])]),t._v(" "),s("p",[s("strong",[t._v("VOLUME")])]),t._v(" "),s("p",[t._v("创建具有指定名称的挂载数据卷，用于数据持久化")]),t._v(" "),s("div",{staticClass:"language-dockerfile extra-class"},[s("pre",{pre:!0,attrs:{class:"language-dockerfile"}},[s("code",[s("span",{pre:!0,attrs:{class:"token instruction"}},[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("VOLUME")]),t._v(" ["),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"volume1"')]),t._v(","),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"volume2"')]),t._v(",...]")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token instruction"}},[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("VOLUME")]),t._v(" volume1 volume2 ...")]),t._v("\n")])])]),s("p",[t._v("数据卷的特征以及作用：")]),t._v(" "),s("ul",[s("li",[t._v("数据持久化，避免容器重启后丢失重要数据")]),t._v(" "),s("li",[t._v("修改数据卷时不会对容器产生影响，防止容器不断膨胀")]),t._v(" "),s("li",[t._v("有利于多个容器共享数据")])]),t._v(" "),s("p",[s("strong",[t._v("ADD")])]),t._v(" "),s("p",[t._v("将构建上下文中指定目录下的文件**(src)"),s("strong",[t._v("复制到镜像文件系统的指定位置")]),t._v("(dest)**")]),t._v(" "),s("div",{staticClass:"language-dockerfile extra-class"},[s("pre",{pre:!0,attrs:{class:"language-dockerfile"}},[s("code",[s("span",{pre:!0,attrs:{class:"token instruction"}},[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("ADD")]),t._v(" [--chown=<user>:<group>][--checksum=<checksum>]<src>... <dest>")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token instruction"}},[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("ADD")]),t._v(" [--chown=<user>:<group>]["),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"<src>"')]),t._v(", ..."),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"<dest>"')]),t._v("]")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token instruction"}},[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("ADD")]),t._v(" <git ref> <dir>")]),t._v("\n")])])]),s("ol",[s("li",[t._v("如果"),s("code",[t._v("ADD")]),t._v("指令对应的src资源有变更，Dockerfile中这条指令后的"),s("strong",[t._v("构建缓存")]),t._v("都会失效")]),t._v(" "),s("li",[t._v("Dockerfile中"),s("code",[t._v("--chown")]),t._v("特性只有在linux下才有效，windows是无效的")]),t._v(" "),s("li",[t._v("src支持通配符")]),t._v(" "),s("li",[t._v("dest必须是文件夹，用以存放文件")]),t._v(" "),s("li",[t._v("如果src是"),s("strong",[t._v("压缩资源")]),t._v("，将会被解压为一个文件")]),t._v(" "),s("li",[t._v("如果 src 是远程 URL, 并且 dest 不以 / 结尾，Docker 从 URL 下载文件，存到 dest 中")]),t._v(" "),s("li",[t._v("如果 src 是远程 URL，URL 中含有非空路径，并且 dest 以 / 结尾，Docker 会推断文件名，根据 URL 中的路径，在目标位置创建相同路径，将下载的文件放入其中")]),t._v(" "),s("li",[t._v("dest 可以是镜像文件系统下的绝对路径，或者是 WORKDIR 下的相对路径")]),t._v(" "),s("li",[t._v("如果 dest 不是以 / 结尾，Docker 会把它当成普通文件，src 中的内容会被写入这个文件中")]),t._v(" "),s("li",[t._v("如果目标位置下的某些目录不存在，会自动创建")]),t._v(" "),s("li",[t._v("ADD 添加网络资源时不支持身份认证，可以使用 RUN wget 或者 RUN curl 实现这个功能")])]),t._v(" "),s("p",[s("strong",[t._v("COPY")])]),t._v(" "),s("p",[t._v("功能与"),s("strong",[t._v("ADD")]),t._v("类似，但是不会自动解压文件，也不能访问网络资源")]),t._v(" "),s("div",{staticClass:"language-dockerfile extra-class"},[s("pre",{pre:!0,attrs:{class:"language-dockerfile"}},[s("code",[s("span",{pre:!0,attrs:{class:"token instruction"}},[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("COPY")]),t._v(" [--chown=<user>:<group>] <src>... <dest>")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token instruction"}},[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("COPY")]),t._v(" [--chown=<user>:<group>] ["),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"<src>"')]),t._v(",... "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"<dest>"')]),t._v("]")]),t._v("\n")])])]),s("p",[s("strong",[t._v("EXPOSE")])]),t._v(" "),s("p",[t._v("约定容器运行时监听的端口，通常用于容器与外界之间的通信")]),t._v(" "),s("div",{staticClass:"language-dockerfile extra-class"},[s("pre",{pre:!0,attrs:{class:"language-dockerfile"}},[s("code",[s("span",{pre:!0,attrs:{class:"token instruction"}},[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("EXPOSE")]),t._v(" <port> [<port>/<protocol>...]")]),t._v("\n")])])]),s("ol",[s("li",[t._v("支持 TCP 或者 UDP 协议，如果不显式指定协议，默认使用 TCP 协议")]),t._v(" "),s("li",[t._v("需要同时以 TCP 和 UDP 协议的方式暴露同一个端口时，需要分别指定")]),t._v(" "),s("li",[t._v("EXPOSE 并不会真正将端口发布到宿主机，而是作为一种约定，让镜像使用者在运行容器时，用 "),s("strong",[t._v("-p")]),t._v(" 分别发布约定端口，或者 "),s("strong",[t._v("-P")]),t._v(" 发布所有约定端口")]),t._v(" "),s("li",[t._v("如果没有暴露端口，运行容器是也可以通过 "),s("strong",[t._v("-p")]),t._v(" 的方式映射端口")])]),t._v(" "),s("p",[s("strong",[t._v("RUN")])]),t._v(" "),s("p",[t._v("用于构建镜像过程中执行命令，有两种执行方式")]),t._v(" "),s("p",[t._v("第一种，以"),s("strong",[t._v("shell")]),t._v("方式运行")]),t._v(" "),s("div",{staticClass:"language-sh extra-class"},[s("pre",{pre:!0,attrs:{class:"language-sh"}},[s("code",[t._v("RUN "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v("command"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v("\nRUN "),s("span",{pre:!0,attrs:{class:"token builtin class-name"}},[t._v("echo")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"Hello Dockerfile"')]),t._v("\n")])])]),s("p",[t._v("第二种，以"),s("strong",[t._v("exec")]),t._v("的方式运行")]),t._v(" "),s("div",{staticClass:"language-sh extra-class"},[s("pre",{pre:!0,attrs:{class:"language-sh"}},[s("code",[t._v("RUN "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"executable"')]),t._v(","),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"param1"')]),t._v(","),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"param2"')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("..")]),t._v("."),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v("\n")])])]),s("p",[s("strong",[t._v("CMD")])]),t._v(" "),s("p",[t._v("构建镜像成功后，所创建的容器启动时执行的命令")]),t._v(" "),s("div",{staticClass:"language-dockerfile extra-class"},[s("pre",{pre:!0,attrs:{class:"language-dockerfile"}},[s("code",[s("span",{pre:!0,attrs:{class:"token instruction"}},[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("CMD")]),t._v(" command param1 param2 #shell")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token instruction"}},[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("CMD")]),t._v(" ["),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"executable"')]),t._v(","),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"param1"')]),t._v(","),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"param2"')]),t._v("] #exec")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token instruction"}},[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("CMD")]),t._v(" ["),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"param1"')]),t._v(","),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"param2"')]),t._v("] #作为ENTRYPOINT的默认参数，是exec方式的特殊形式")]),t._v("\n")])])]),s("ol",[s("li",[t._v("Docker种只有一条"),s("code",[t._v("CMD")]),t._v("指令生效，在多条CMD指令存在的情况下，只有最后一条生效")]),t._v(" "),s("li",[t._v("虽然Dockerfile中只有一条CMD生效，但每一条CMD指令会新增一个镜像层，所有推荐只定义一条CMD指令，使用"),s("code",[t._v("&&")]),t._v("连接多个指令")]),t._v(" "),s("li",[t._v("exec方式是通过JSON数组的方式进行解析的，因此需要双引号")]),t._v(" "),s("li",[t._v("与RUN指令不同，RUN指令是在构建指令的过程中执行，CMD命令是在容器启动时执行")]),t._v(" "),s("li",[s("code",[t._v("docker run")]),t._v("后的命令行参数会覆盖CMD中的命令")])]),t._v(" "),s("p",[s("strong",[t._v("ENTRYPOINT")])]),t._v(" "),s("p",[t._v("用于配置容器以可执行的方式运行。有两种形式")]),t._v(" "),s("div",{staticClass:"language-dockerfile extra-class"},[s("pre",{pre:!0,attrs:{class:"language-dockerfile"}},[s("code",[s("span",{pre:!0,attrs:{class:"token instruction"}},[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("ENTRYPOINT")]),t._v(" ["),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"executable"')]),t._v(","),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"param1"')]),t._v(","),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"param2"')]),t._v("] #推荐")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token instruction"}},[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("ENTRYPOINT")]),t._v(" command param1 param2")]),t._v("\n")])])]),s("ol",[s("li",[t._v("Dockerfile中只有最后一条"),s("code",[t._v("ENTRYPOINT")]),t._v("指令生效")]),t._v(" "),s("li",[t._v("运行容器时，docker run --entrypoint 覆盖该指令")]),t._v(" "),s("li",[t._v("shell 形式的 ENTRYPOINT 会使 CMD 命令 和 docker run "),s("img",{attrs:{src:"",alt:"img"}}),t._v(" 中的命令行参数失效。它有一个缺点，ENTRYPOINT 命令将作为 /bin/sh -c 的子命令，不会传递信号。比如，停止容器时，容器内接收不到 SIGTERM 信号，这并不是预期的效果，可以在命令前添加 exec 来解决，如 ENTRYPOINT exec top -b")]),t._v(" "),s("li",[t._v("指定 ENTRYPOINT 后，CMD 的内容将作为默认参数传给 ENTRYPOINT 指令，形如")]),t._v(" "),s("li",[t._v("如果 CMD 是在基础镜像中定义的，当前镜像定义的 ENTRYPOINT 会将 CMD 的值重置为空值，这种情况下，需要重新定义 CMD")])]),t._v(" "),s("h1",{attrs:{id:"docker-compose"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#docker-compose"}},[t._v("#")]),t._v(" Docker-Compose")]),t._v(" "),s("p",[t._v("docker-compose通过一个声明式的配置文件描述整个应用，从而使用一条命令即可完成部署")]),t._v(" "),s("p",[t._v("docker-compose同使用"),s("strong",[t._v("YAML")]),t._v("文件来定义多级服务，在使用时默认使用文件名"),s("code",[t._v("docker-compose.yml")]),t._v("，也可以在docker compose运行时使用"),s("code",[t._v("-f")]),t._v("参数来指定具体文件")]),t._v(" "),s("p",[s("strong",[t._v("compose")]),t._v("的优点")]),t._v(" "),s("ul",[s("li",[t._v("在单主机上建立多个隔离环境，Compose使用项目名称将环境彼此隔离，可以在多个不同的上下文中使用此项目名称")]),t._v(" "),s("li",[t._v("创建容器时保留卷数据")]),t._v(" "),s("li",[t._v("仅重新创建以更改的容器，当服务没有更改时，Compose会使用现有的容器")]),t._v(" "),s("li",[t._v("变量在环境之间组合重复使用")])]),t._v(" "),s("p",[s("strong",[t._v("多个配置文件")])]),t._v(" "),s("p",[t._v("可以为用一个项目配置多个compose文件，使用多个compose文件能够针对不同的环境或者不同的工作流自定义compose应用程序")]),t._v(" "),s("p",[t._v("默认情况下，compose读取两个文件，"),s("code",[t._v("docker-compose.yml")]),t._v("和一个可选"),s("code",[t._v("docker-compose.override.yml")]),t._v("文件")]),t._v(" "),s("p",[t._v("如果在两个文件中都定义了服务，compose会使用override进行合并配置")]),t._v(" "),s("p",[t._v("当配置文件的名称非默认情况时，可以使用"),s("code",[t._v("-f")]),t._v("指定Compose文件")]),t._v(" "),s("div",{staticClass:"language-bash extra-class"},[s("pre",{pre:!0,attrs:{class:"language-bash"}},[s("code",[s("span",{pre:!0,attrs:{class:"token function"}},[t._v("docker-compose")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token parameter variable"}},[t._v("-f")]),t._v(" docker-compose.yml "),s("span",{pre:!0,attrs:{class:"token parameter variable"}},[t._v("-f")]),t._v(" docker-compose.prod.yml up "),s("span",{pre:!0,attrs:{class:"token parameter variable"}},[t._v("-d")]),t._v("\n")])])]),s("p",[s("strong",[t._v("yaml")]),t._v("文件级")]),t._v(" "),s("p",[t._v("Docker compose的YAML文件包含有4个一级key:"),s("code",[t._v("version")]),t._v(","),s("code",[t._v("services")]),t._v(","),s("code",[t._v("networks")]),t._v(","),s("code",[t._v("volumes")])]),t._v(" "),s("ul",[s("li",[s("code",[t._v("version")]),t._v(":指定版本信息，通常位于文件的第一行。其定义了Compose文件格式的版本。")]),t._v(" "),s("li",[s("code",[t._v("services")]),t._v(":用于定义不用的应用服务。Docker Compose会将每个服务部署在各种的容器中。")]),t._v(" "),s("li",[s("code",[t._v("networks")]),t._v(":用于指引Docker创建新的网络。默认情况下，Docker Compose会创建bridge网络，这个是一个单主机网络，只能实现同一主机上容器的连接。可以使用driver属性指定不同的网络类型")]),t._v(" "),s("li",[s("code",[t._v("volumes")]),t._v("用于指引Docker来创建新的卷")])]),t._v(" "),s("h2",{attrs:{id:"docker-compose-yml的具体配置"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#docker-compose-yml的具体配置"}},[t._v("#")]),t._v(" "),s("strong",[t._v("docker-compose.yml")]),t._v("的具体配置：")]),t._v(" "),s("h2",{attrs:{id:"_1-build"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_1-build"}},[t._v("#")]),t._v(" 1.build")]),t._v(" "),s("p",[t._v("指定构建镜像的dockerfile的上下文路径，或者详细配置文件")]),t._v(" "),s("div",{staticClass:"language-yaml extra-class"},[s("pre",{pre:!0,attrs:{class:"language-yaml"}},[s("code",[s("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("version")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"3.9"')]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("services")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n\t"),s("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("webapp")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" \n\t\t"),s("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("build")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" ./dir\n")])])]),s("p",[t._v("或者更详细的写法")]),t._v(" "),s("div",{staticClass:"language-yaml extra-class"},[s("pre",{pre:!0,attrs:{class:"language-yaml"}},[s("code",[s("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("version")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"3.9"')]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("services")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n  "),s("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("webapp")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("build")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n      "),s("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("context")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" ./dir\n      "),s("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("dockerfile")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" Dockerfile"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("-")]),t._v("alternate\n      "),s("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("args")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n        "),s("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("buildno")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),t._v("\n")])])]),s("ul",[s("li",[s("strong",[t._v("context")]),t._v(" 上下文路径，可以是文件路径，也可以是到链接到 git 仓库的 url。当是相对路径时，它被解释为相对于 Compose 文件的位置。")]),t._v(" "),s("li",[s("strong",[t._v("dockerfile")]),t._v(" 指定构建镜像的 Dockerfile 文件名")]),t._v(" "),s("li",[s("strong",[t._v("args")]),t._v(" 构建参数，只能在构建过程中访问的环境变量")]),t._v(" "),s("li",[s("strong",[t._v("cache_from")]),t._v(" 缓存解析镜像列表")]),t._v(" "),s("li",[s("strong",[t._v("labels")]),t._v(" 设置构建镜像的元数据")]),t._v(" "),s("li",[s("strong",[t._v("network")]),t._v(" 设置网络容器连接，"),s("code",[t._v("none")]),t._v(" 表示在构建期间禁用网络")]),t._v(" "),s("li",[s("strong",[t._v("shm_size")]),t._v(" 设置"),s("code",[t._v("/dev/shm")]),t._v("此构建容器的分区大小")]),t._v(" "),s("li",[s("strong",[t._v("target")]),t._v(" 多阶段构建，可以指定构建哪一层")])]),t._v(" "),s("h2",{attrs:{id:"_2-network"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_2-network"}},[t._v("#")]),t._v(" 2.network")]),t._v(" "),s("p",[t._v("...累了，下次再写")]),t._v(" "),s("div",{staticClass:"language-yaml extra-class"},[s("pre",{pre:!0,attrs:{class:"language-yaml"}},[s("code",[s("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("version")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'3.9'")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("services")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n  mysql"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n    build"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n      context"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" ./mysql\n    environment"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n      MYSQL_ROOT_PASSWORD"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" admin\n    restart"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" always\n    container_name"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" mysql\n    volumes"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("-")]),t._v(" /data/edu"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("-")]),t._v("bom/mysql/test"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("/var/lib/mysql\n    image"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" mysql/mysql"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("5.7")]),t._v("\n    ports"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n      "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("-")]),t._v(" 3306"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("3306")]),t._v("\n    networks"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n      net"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n  eureka"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n    build"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n      context"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" ./edu"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("-")]),t._v("eureka"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("-")]),t._v("boot\n    restart"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" always\n    ports"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n      "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("-")]),t._v(" 8761"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("8761")]),t._v("\n    container_name"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" edu"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("-")]),t._v("eureka"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("-")]),t._v("boot\n    hostname"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" edu"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("-")]),t._v("eureka"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("-")]),t._v("boot\n    image"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" edu/edu"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("-")]),t._v("eureka"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("-")]),t._v("boot"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("1.0")]),t._v("\n    depends_on"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n      "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("-")]),t._v(" mysql\n    networks"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n      net"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("networks")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("net")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("volumes")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("vol")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n")])])]),s("p",[s("strong",[t._v("docker compose常用命令")])]),t._v(" "),s("ul",[s("li",[t._v("构建并启动服务——"),s("code",[t._v("docker-compose up -d")])]),t._v(" "),s("li",[t._v("停止运行并删除服务——"),s("code",[t._v("docker-compose down")])]),t._v(" "),s("li",[t._v("列出所有运行容器——"),s("code",[t._v("docker-compose ps")])]),t._v(" "),s("li",[t._v("查看服务日志——"),s("code",[t._v("docker-compose logs")])]),t._v(" "),s("li",[t._v("构建或重建——"),s("code",[t._v("docker-compose build")])]),t._v(" "),s("li",[t._v("启动服务——"),s("code",[t._v("docker-compose start")])]),t._v(" "),s("li",[t._v("停止运行中的服务——"),s("code",[t._v("docker-compose stop")])]),t._v(" "),s("li",[t._v("重启服务——"),s("code",[t._v("docker-compose restart")])])])])}),[],!1,null,null,null);s.default=r.exports}}]);