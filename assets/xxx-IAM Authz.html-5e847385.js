import{_ as t,o as e,c as d,e as r}from"./app-f1c34f66.js";const o={},i=r('<h1 id="xxx-认证" tabindex="-1"><a class="header-anchor" href="#xxx-认证" aria-hidden="true">#</a> xxx - 认证</h1><p>常见的认证方式有4种：基础认证（Basic认证）、摘要认证（Digest认证）、开发授权（OAuth认证）、令牌认证（Bearer认证）。</p><h2 id="_1-认证与授权的区别" tabindex="-1"><a class="header-anchor" href="#_1-认证与授权的区别" aria-hidden="true">#</a> 1. 认证与授权的区别</h2><ul><li>认证（authentication，缩写authn）：用以验证某用户是否具有访问系统的权限。如果验证通过，该用户则可以访问系统，从而使用系统内的资源</li><li>授权（authorization，缩写authz）：用来验证某用户是否具有访问某个资源的权限。如果授权通过，该用户可以对资源进行curd操作</li></ul><p><code>授权</code>：决定你能操作什么资源</p><p><code>认证</code>：证明你有资格操作资源</p><h2 id="_2-四种基本的认证方式" tabindex="-1"><a class="header-anchor" href="#_2-四种基本的认证方式" aria-hidden="true">#</a> 2. 四种基本的认证方式</h2><h3 id="一、基础认证" tabindex="-1"><a class="header-anchor" href="#一、基础认证" aria-hidden="true">#</a> 一、基础认证</h3><p>基础认证（Basic认证）是最简单的认证方法。它简单将“用户名：密码”进行base64编码后，放到了HTTP Authorization Header中。后端服务解析Authorization Header中的base64字符串，解码获取到用户名和密码，并将用户名和密码与数据库中记录的值进行比较，如果匹配则认证通过。</p><blockquote><p>注意，basic认证并非安全的认证方式，因为base64并不是加密技术，入侵者可以通过反编码获取用户名和密码。为了保证安全，使用基础认证的唯一方式就是将其与SSL配合使用，以确保整个认证过程是安全的。</p></blockquote><h3 id="二、摘要认证" tabindex="-1"><a class="header-anchor" href="#二、摘要认证" aria-hidden="true">#</a> 二、摘要认证</h3><p>摘要认证（Digest认证）是另外一种HTTP认证协议，它与基本认证兼容，并修复了基本认证的缺点：</p><ol><li>绝不使用明文方式在网络上发送密码</li><li>可以有效防止恶意用户进行重放攻击</li><li>可以有选择地防止对报文内容的篡改</li></ol><p>完整<strong>摘要认证</strong>的步骤：</p><ol><li>客户端请求服务端的资源</li><li>在客户端能够证明其身份之前，服务端发送认证失败，返回401错误，并返回WWW-Authenticate头，里面包含认证需要的信息</li><li>客户端根据WWW-Authenticate头中的信息，选择加密算法，并使用密码随机数<code>nonce</code>，计算出密码摘要<code>response</code>，再次请求服务端</li><li>服务端将客户端提供的密码摘要与服务端内部计算出来的摘要进行对比，如果匹配则认证通过，并返回一些与授权会话相关的附加信息，放在Authorization-Info中</li></ol><table><thead><tr><th>字段</th><th>描述</th></tr></thead><tbody><tr><td>authentication scheme</td><td>指定要使用的身份验证协议，例如 Basic 或 Digest 等。</td></tr><tr><td>realm</td><td>标识受保护资源所属的域。</td></tr><tr><td>charset</td><td>指定在 HTTP 身份验证响应中使用的字符编码格式。默认为 UTF-8。</td></tr><tr><td>nonce</td><td>一次性的随机数，在摘要身份验证中使用。</td></tr><tr><td>opaque</td><td>不透明的字符串，由服务器生成，用于防止重放攻击。</td></tr><tr><td>algorithm</td><td>摘要算法，用于指定客户端和服务器之间用于创建响应摘要的哈希算法。常见值为 MD5 和 SHA-256。</td></tr><tr><td>qop</td><td>指定质量保证（Quality of Protection）的类型，包括 auth 和 auth-int。</td></tr><tr><td>stale</td><td>指示客户端是否应该尝试重新认证。如果值为 true，则客户端应该发送带有新 nonce 值的请求。</td></tr><tr><td>username</td><td>用户名</td></tr><tr><td>method</td><td>HTTP请求方法</td></tr><tr><td>nc(nonceCount)</td><td>请求的次数，用于标记、计数、防止重放攻击</td></tr><tr><td>uri</td><td>请求的uri</td></tr><tr><td>response</td><td>客户端根据算法算出的密码摘要值</td></tr></tbody></table><h3 id="三、开放授权认证" tabindex="-1"><a class="header-anchor" href="#三、开放授权认证" aria-hidden="true">#</a> 三、开放授权认证</h3><p>开放授权认证（OAuth认证）是一个开放的授权标准，允许用户让第三方应用访问该用户在某一个Web服务上储存的私密资源，且无需将用户名和密码将提供给第三方应用。</p><p>OAuth 2.0一共有4种授权模式，分别为<strong>密码模式</strong>、<strong>隐式授权模式</strong>、<strong>客户端凭证模式</strong>和<strong>授权码授权模式</strong></p><ol><li>密码模式</li></ol><p>密码模式就是用户把用户名和密码直接告诉第三方应用，由第三方应用使用用户名和密码换取<strong>令牌</strong>。</p><p>注意：这种授权方法的前提是无法采用其他授权方式，并且应用信任某应用，认证如下：</p><blockquote><ul><li>网站A向用户发出获取用户名和密码的请求</li><li>用户同意后，网站A凭借用户名和密码向网站B换取令牌</li><li>网站B验证用户身份后，给出A的令牌，A凭借令牌可以访问网站B对应权限的资源</li></ul></blockquote><ol start="2"><li><p>隐式授权模式</p></li><li><p>客户端凭证模式 这种模式是在命令行中请求授权，适用于没有前端的命令行程序，认证流程如下：</p></li></ol><blockquote><ul><li>应用A在命令行向应用B请求授权，此时应用A携带应用B提前颁布的<code>secretID</code>和<code>secretKey</code>，其中<code>secretKey</code>出于安全性考虑，需要在后端发送</li><li>应用B接收<code>secretID</code>和<code>secretKey</code>，并进行身份验证，验证通过后返回给应用A</li></ul></blockquote><ol start="4"><li>授权码授权模式 这种模式由第三方应用提前申请一个<strong>授权码</strong>，再使用授权码来获取<strong>令牌</strong>，相对来说，这种模式安全性更高，前端传送授权码，后端存储令牌。 认证流程如下：</li></ol><blockquote><ul><li>A提供一个跳转到B的链接+<code>redirect_url</code>，用户单机跳转到B</li><li>用户携带向B提前申请的<code>client_id</code>，向B发起身份验证请求</li><li>用户登录B，通过验证，授予A权限，此时网站跳转回<code>redirect_url</code>,其中会有B通过验证后的授权码符在该URL之后</li><li>网站A携带授权码向网站B请求令牌，网站B验证授权后，返回令牌，即<code>access_token</code></li></ul></blockquote><h3 id="四、令牌认证" tabindex="-1"><a class="header-anchor" href="#四、令牌认证" aria-hidden="true">#</a> 四、令牌认证</h3><p>令牌认证（Bearer认证）是一种HTTP身份验证方式。令牌认证的核心是<code>Bearer Token</code>。</p><p><code>Bearer Token</code>是一个加密字符串，通常由服务端根据密钥生成。</p>',30),a=[i];function c(l,n){return e(),d("div",null,a)}const s=t(o,[["render",c],["__file","xxx-IAM Authz.html.vue"]]);export{s as default};
