import{_ as o,r as a,o as c,c as r,a as e,b as d,d as n,e as l}from"./app-dc2a6862.js";const i={},s=l(`<h1 id="_001-go命令行操作" tabindex="-1"><a class="header-anchor" href="#_001-go命令行操作" aria-hidden="true">#</a> 001 - Go命令行操作</h1><h2 id="_0-1-构建并安装go程序" tabindex="-1"><a class="header-anchor" href="#_0-1-构建并安装go程序" aria-hidden="true">#</a> 0.1 构建并安装Go程序</h2><ul><li><code>go build</code> 编译并安装自身包和依赖包</li></ul><table><thead><tr><th>标记名称</th><th>标记描述</th></tr></thead><tbody><tr><td>-a</td><td>强行对所有涉及到的代码包（包含标准库中的代码包）进行重新构建，即使它们已经是最新的了。</td></tr><tr><td>-n</td><td>打印编译期间所用到的其它命令，但是并不真正执行它们。</td></tr><tr><td>-race</td><td>开启竞态条件的检测。不过此标记目前仅在<code>linux/amd64</code>、<code>freebsd/amd64</code>、<code>darwin/amd64</code>和<code>windows/amd64</code>平台下受到支持。</td></tr><tr><td>-v</td><td>打印出那些被编译的代码包的名字。</td></tr><tr><td>-work</td><td>打印出编译时生成的临时工作目录的路径，并在编译结束时保留它。在默认情况下，编译结束时会删除该目录。</td></tr><tr><td>-x</td><td>打印编译期间所用到的其它命令。注意它与<code>-n</code>标记的区别。</td></tr></tbody></table><ul><li><code>go install</code> 安装自身包或者依赖包</li><li><code>go get</code>根据需求从互联网（一般是从github）下载或者更新指定的代码包以及依赖包</li></ul><table><thead><tr><th>标记名称</th><th>标记描述</th></tr></thead><tbody><tr><td>-d</td><td>让命令程序只执行下载动作，而不执行安装动作。</td></tr><tr><td>-f</td><td>仅在使用<code>-u</code>标记时才有效。该标记会让命令程序忽略掉对已下载代码包的导入路径的检查。如果下载并安装的代码包所属的项目是你从别人那里Fork过来的，那么这样做就尤为重要了。</td></tr><tr><td>-fix</td><td>让命令程序在下载代码包后先执行修正动作，而后再进行编译和安装。</td></tr><tr><td>-insecure</td><td>允许命令程序使用非安全的scheme（如HTTP）去下载指定的代码包。如果你用的代码仓库（如公司内部的Gitlab）没有HTTPS支持，可以添加此标记。请在确定安全的情况下使用它。</td></tr><tr><td>-t</td><td>让命令程序同时下载并安装指定的代码包中的测试源码文件中依赖的代码包。</td></tr><tr><td>-u</td><td>让命令利用网络来更新已有代码包及其依赖包。默认情况下，该命令只会从网络上下载本地不存在的代码包，而不会更新已有的代码包。</td></tr></tbody></table><ul><li><code>go clean</code>删除执行其它命令是产生的一些文件或者目录</li><li><code>go run</code>编译并运行命令源文件，</li></ul><p>使用<code>go run</code>时，如果在<code>package main</code>中有多个源文件，需要把这些源文件一起编译并运行</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>go run main.go main2.go <span class="token comment"># go run .</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h2 id="_0-2-格式化代码" tabindex="-1"><a class="header-anchor" href="#_0-2-格式化代码" aria-hidden="true">#</a> 0.2 格式化代码</h2><p><code>go fmt</code> 这个工具可以将源代码格式化成符合官方统一标准的风格，<strong>必须在编译或者提交版本管理系统之前使用<code>go fmt</code>来格式化代码</strong></p><p><code>go fmt</code>命令的使用：</p><ul><li><p><code>gofmt -w program.go</code> 会格式化源代码文件并覆盖它，<code>-w</code>如果不加的话，只会打印格式化后的源代码并不会重写文件</p></li><li><p><code>gofmt -w *.go0</code> 格式化并重写所有Go文件</p></li><li><p><code>gofmt map1</code> 会格式化并重写map1目录以及其子目录下所有Go源文件</p></li><li><p><code>gofmtr -r &lt;原始内容&gt; -&gt; &lt;替换内容&gt;</code>其中<code>-r</code>可以实现源代码替换</p></li></ul><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token comment"># 将源文件中没有意义的括号去掉</span>
gofmt <span class="token parameter variable">-r</span> <span class="token string">&#39;(a) -&gt; a&#39;</span> –w *.go
<span class="token comment"># 会将源文件中多余的 len(a) 去掉</span>
gofmt –r <span class="token string">&#39;A.Func1(a,b) -&gt; A.Func2(b,a)&#39;</span> –w *.go
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="_0-3-生成代码文档" tabindex="-1"><a class="header-anchor" href="#_0-3-生成代码文档" aria-hidden="true">#</a> 0.3 生成代码文档</h2><p><code>go doc</code>工具会从Go程序和包文件中提取顶级声明的首行注释以及每个对象的相关注释，并生成相关文档</p><p>一般用法：</p><ul><li><code>go doc package</code>获取包的文档注释，例如\`go doc fmt\`\`</li><li><code>go doc package/subpackage</code>获取子包的文档注释</li><li><code>godoc --http=:6060</code>，可以在浏览器中打开<strong>http://localhost:6060</strong>，产看本地文档浏览服务器提供的页面</li></ul><blockquote><p>注意：godoc命令，我在go1.20.1版本下无法直接使用，原因目前未去探究；</p><p>godoc在Go语言版本1.5中，是一个内置的标准命令</p></blockquote><h2 id="_0-4-其它工具" tabindex="-1"><a class="header-anchor" href="#_0-4-其它工具" aria-hidden="true">#</a> 0.4 其它工具</h2><ul><li><code>go fix</code> 将Go代码从旧的发行版本迁移到最近的发行版</li><li><code>go test</code> 一个轻量级的单元测试框架</li><li><code>go list</code>命令的作用是列出指定的代码包的信息</li><li><code>go env</code>用于打印Go语言的环境信息</li></ul>`,21),g={href:"https://hyper0x.github.io/go_command_tutorial/#/",target:"_blank",rel:"noopener noreferrer"};function h(p,u){const t=a("ExternalLinkIcon");return c(),r("div",null,[s,e("blockquote",null,[e("p",null,[d("learning from ："),e("a",g,[d("Go 命令教程 (hyper0x.github.io)"),n(t)])])])])}const b=o(i,[["render",h],["__file","001-go命令行操作.html.vue"]]);export{b as default};
