import{_ as e,o as i,c as l,e as t}from"./app-c89e49fa.js";const a={},d=t(`<h1 id="_3-2-http-1-1如何优化" tabindex="-1"><a class="header-anchor" href="#_3-2-http-1-1如何优化" aria-hidden="true">#</a> 3.2 - HTTP/1.1如何优化</h1><ul><li>尽量避免发送HTTP请求 <ul><li>缓存</li></ul></li><li>在需要发送HTTP请求时，考虑减少请求次数 <ul><li>减少重定向请求次数</li><li>合并请求</li><li>延迟发送请求</li></ul></li><li>减少服务器的HTTP响应的数据大小 <ul><li>无损压缩</li><li>有损压缩</li></ul></li></ul><h2 id="如何避免发送http请求" tabindex="-1"><a class="header-anchor" href="#如何避免发送http请求" aria-hidden="true">#</a> 如何避免发送HTTP请求</h2><p>使用<strong>缓存技术</strong>，把<code>请求-响应</code>的数据缓存在本地</p><p><img src="https://cdn.xiaolincoding.com/gh/xiaolincoder/ImageHost4@main/网络/http1.1优化/缓存etag.png" alt="http缓存"></p><h2 id="如何减少http请求次数" tabindex="-1"><a class="header-anchor" href="#如何减少http请求次数" aria-hidden="true">#</a> 如何减少HTTP请求次数</h2><p>减少HTTP请求次数，从这个三个方面入手：</p><ul><li>减少重定向请求次数</li></ul><p>重定向交由<strong>代理服务器</strong>处理，同时代理服务器可以知晓（记录）重定向规则，进一步减少消息传递次数</p><ul><li>合并请求</li></ul><p>将多个访问小文件的请求合并为一个大请求，减少重复发送的HTTP头部</p><p>合并请求的方式就是合并资源，以一个大资源的请求替换多个小资源的请求，但是这样合并也带来了新的问题，当大资源中的某一个小资源发生变化后，客户端必须重新下载整个完整的大资源文件</p><ul><li>延迟发送请求</li></ul><p>简单讲：就是按照需求，减少第一时间需要的HTTP请求，以减少HTTP请求压力</p><h2 id="如何减少http响应的数据大小" tabindex="-1"><a class="header-anchor" href="#如何减少http响应的数据大小" aria-hidden="true">#</a> 如何减少HTTP响应的数据大小</h2><p>考虑对响应的资源进行<strong>压缩</strong>，以达到减少响应的数据大小，而提高网络传输的效率</p><p>压缩的方式分两种：</p><ul><li>无损压缩</li></ul><p>无损压缩，指资源经过压缩后，信息不被破环，还能完全恢复到压缩前的原样</p><p><code>gzip</code>：比较常见的无损压缩算法，会在HTTP请求中通过头部的<code>Accept-Encoding</code>字段告诉服务器：</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>Accept-Encoding: gzip, deflate, br
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>服务器收到后，根据压缩算法对资源进行压缩，最后通过头部中的<code>Content-Encoding</code>字段告诉客户端资源使用的压缩算法</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>Content-Encoding: gzip
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><ul><li>有损压缩</li></ul><p>有损压缩的发生是指经过该方法压缩、解压的数据会与原始数据不同但是十分接近</p><p>主要用于：多媒体数据，音频、视频、图片等</p><p>在HTTP请求的头部<code>Accept</code>字段里的&quot;q质量因子&quot;，告诉服务器期望的资源质量</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>Accept: audio/*; q=0.2; audio/basic
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h2 id="总结" tabindex="-1"><a class="header-anchor" href="#总结" aria-hidden="true">#</a> 总结</h2><p>优化HTTP/1.1协议的思路</p><p>第一个思路是，通过缓存技术来避免发送 HTTP 请求。客户端收到第一个请求的响应后，可以将其缓存在本地磁盘，下次请求的时候，如果缓存没过期，就直接读取本地缓存的响应数据。如果缓存过期，客户端发送请求的时候带上响应数据的摘要，服务器比对后发现资源没有变化，就发出不带包体的 304 响应，告诉客户端缓存的响应仍然有效。</p><p>第二个思路是，减少 HTTP 请求的次数，有以下的方法：</p><ol><li>将原本由客户端处理的重定向请求，交给代理服务器处理，这样可以减少重定向请求的次数；</li><li>将多个小资源合并成一个大资源再传输，能够减少 HTTP 请求次数以及 头部的重复传输，再来减少 TCP 连接数量，进而省去 TCP 握手和慢启动的网络消耗；</li><li>按需访问资源，只访问当前用户看得到/用得到的资源，当客户往下滑动，再访问接下来的资源，以此达到延迟请求，也就减少了同一时间的 HTTP 请求次数。</li></ol><p>第三思路是，通过压缩响应资源，降低传输资源的大小，从而提高传输效率，所以应当选择更优秀的压缩算法。</p>`,34),n=[d];function c(p,r){return i(),l("div",null,n)}const s=e(a,[["render",c],["__file","02-HTTP1.1如何优化.html.vue"]]);export{s as default};
