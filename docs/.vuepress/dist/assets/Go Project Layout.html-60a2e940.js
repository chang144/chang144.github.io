import{_ as l,r as s,o as p,c as a,a as o,b as e,d as n,e as r}from"./app-5c7d7b5c.js";const c={},i=o("h1",{id:"go-project-layout",tabindex:"-1"},[o("a",{class:"header-anchor",href:"#go-project-layout","aria-hidden":"true"},"#"),e(" Go Project Layout")],-1),d={href:"https://github.com/golang-standards/project-layout/blob/master/README_zh.md",target:"_blank",rel:"noopener noreferrer"},_=o("h2",{id:"go-目录",tabindex:"-1"},[o("a",{class:"header-anchor",href:"#go-目录","aria-hidden":"true"},"#"),e(" Go 目录")],-1),h=o("hr",null,null,-1),g=o("li",null,[o("p",null,[o("strong",null,"/cmd")]),o("p",null,"本项目的主干"),o("p",null,"每个应用程序的目录名应该与想要的可执行文件名称相匹配[/cmd/myapp]")],-1),u=o("p",null,[o("strong",null,"/internal")],-1),m={href:"https://golang.org/doc/go1.4#internalpackages",target:"_blank",rel:"noopener noreferrer"},b=o("code",null,"release notes",-1),f=o("code",null,"internal",-1),k=o("p",null,[e("你可以选择向 internal 包中添加一些额外的结构，以分隔共享和非共享的内部代码。这不是必需的(特别是对于较小的项目)，但是最好有有可视化的线索来显示预期的包的用途。你的实际应用程序代码可以放在 "),o("code",null,"/internal/app"),e(" 目录下(例如 "),o("code",null,"/internal/app/myapp"),e(")，这些应用程序共享的代码可以放在 "),o("code",null,"/internal/pkg"),e(" 目录下(例如 "),o("code",null,"/internal/pkg/myprivlib"),e(")。")],-1),y=o("p",null,[o("strong",null,"/pkg"),e("（可以理解为公共类/工具类）")],-1),G=o("code",null,"/pkg/mypubliclib",-1),v=o("code",null,"internal",-1),w=o("code",null,"/pkg",-1),x={href:"https://travisjeffery.com/b/2019/11/i-ll-take-pkg-over-internal/",target:"_blank",rel:"noopener noreferrer"},E=o("code",null,"I'll take pkg over internal",-1),j=o("code",null,"pkg",-1),P=o("code",null,"internal",-1),M={href:"https://www.youtube.com/watch?v=PTE4VJIdHPg",target:"_blank",rel:"noopener noreferrer"},I=o("code",null,"Best Practices for Industrial Programming",-1),S={href:"https://www.youtube.com/watch?v=oL6JBUk6tj0",target:"_blank",rel:"noopener noreferrer"},A={href:"https://www.youtube.com/watch?v=3gQa1LWwuzk",target:"_blank",rel:"noopener noreferrer"},L={href:"https://github.com/golang-standards/project-layout/blob/master/pkg/README.md",target:"_blank",rel:"noopener noreferrer"},D=o("code",null,"/pkg",-1),N=o("p",null,"如果你的应用程序项目真的很小，并且额外的嵌套并不能增加多少价值(除非你真的想要:-)，那就不要使用它。当它变得足够大时，你的根目录会变得非常繁琐时(尤其是当你有很多非 Go 应用组件时)，请考虑一下。",-1),B=o("p",null,[o("strong",null,"/vendor")],-1),V={href:"https://github.com/golang/go/wiki/Modules",target:"_blank",rel:"noopener noreferrer"},z=o("code",null,"Go Modules",-1),C=o("code",null,"go mod vendor",-1),J=o("code",null,"/vendor",-1),R=o("code",null,"go build",-1),T=o("code",null,"-mod=vendor",-1),U=o("p",null,"如果你正在构建一个库，那么不要提交你的应用程序依赖项。",-1),W={href:"https://golang.org/doc/go1.13#modules",target:"_blank",rel:"noopener noreferrer"},H=o("code",null,"1.13",-1),O={href:"https://proxy.golang.org/",target:"_blank",rel:"noopener noreferrer"},Y=o("code",null,"https://proxy.golang.org",-1),q={href:"https://blog.golang.org/module-mirror-launch",target:"_blank",rel:"noopener noreferrer"},K=o("code",null,"here",-1),Q=o("code",null,"vendor",-1),Z={href:"https://github.com/goproxy/goproxy.cn/blob/master/README.zh-CN.md",target:"_blank",rel:"noopener noreferrer"},F=o("code",null,"模块代理",-1),X=r("<li><p><strong>/api</strong></p><p>OpenAPI/Swagger 规范，JSON 模式文件，协议定义文件。</p></li><li><p><strong>/web</strong></p><p>特定于 Web 应用程序的组件:静态 Web 资产、服务器端模板和 SPAs。</p></li><li><p><strong>/configs</strong></p><p>配置文件模板或默认配置。</p><p>将你的 <code>confd</code> 或 <code>consul-template</code> 模板文件放在这里。</p></li><li><p><strong>/init</strong></p><p>System init（systemd，upstart，sysv）和 process manager/supervisor（runit，supervisor）配置。</p></li>",4),$=o("p",null,[o("strong",null,"/scripts")],-1),oo=o("p",null,"执行各种构建、安装、分析等操作的脚本",-1),eo=o("p",null,"这些脚本保持了根级别的Makefile变得小而简单",-1),to={href:"https://github.com/hashicorp/terraform/blob/master/Makefile",target:"_blank",rel:"noopener noreferrer"},no=o("code",null,"https://github.com/hashicorp/terraform/blob/master/Makefile",-1),ro=r("<li><p><strong>/build</strong></p><p>打包和持续集成。</p><p>将你的云(AMI)、容器(Docker)、操作系统(deb\\rpm\\pkg)包配置和脚本放在 <code>/build/package</code></p></li><li><p><strong>/deployments</strong></p><p>IaaS、PaaS、系统和容器编排部署配置和模板(docker-compose、kubernetes/helm、mesos、terraform、bosh)。注意，在一些存储库中(特别是使用 kubernetes 部署的应用程序)</p></li><li><p><strong>/test</strong></p><p>额外的外部测试应用程序和测试数据。可以随时根据需求构造/test目录。对于较大的项目，可以搭建一个数据子目录。例如 <code>/test/data</code>，如果需要忽略目录中的文件，可以使用以“.”或者“_”开头的目录或者文件，Go会忽略这些文件。</p></li><li><p><strong>/docs</strong></p><p>设计和用户文档（除了 godoc生成的文档之外）</p></li><li><p><strong>/tools</strong></p><p>这个项目的支持工具。notice：这些工具可以从 <code>/pkg</code> 和 <code>/internal</code> 目录导入代码</p></li><li><p><strong>/example</strong></p><p>你的应用程序和或者公共库的示例</p></li><li><p><strong>/third_party</strong>（第三方支持，例如插件）</p><p>外部辅助工具、分叉代码和其他第三方工具（例如 Swagger UI）</p></li><li><p><strong>/githooks</strong></p><p>Git hooks</p></li><li><p><strong>/assets</strong></p><p>和存储库一起使用的其他资产（图像、徽标等）</p></li><li><p><strong>/website</strong></p><p>如果不使用Github页面，则在这里放置项目的网站数据。</p><hr><p>不应该拥有的目录</p><p><strong>/src</strong></p></li>",10);function lo(so,po){const t=s("ExternalLinkIcon");return p(),a("div",null,[i,o("blockquote",null,[o("p",null,[e("参考链接"),o("a",d,[e("project-layout/README_zh.md at master · golang-standards/project-layout (github.com)"),n(t)])])]),_,h,o("ul",null,[g,o("li",null,[u,o("p",null,[e("私有应用程序和库代码。这是你不希望其他人在其应用程序或库中导入代码。请注意，这个布局模式是由 Go 编译器本身执行的。有关更多细节，请参阅Go 1.4 "),o("a",m,[b,n(t)]),e(" 。注意，你并不局限于顶级 "),f,e(" 目录。在项目树的任何级别上都可以有多个内部目录。")]),k]),o("li",null,[y,o("p",null,[e("外部应用程序可以使用的库代码(例如 "),G,e(")。其他项目会导入这些库，希望它们能正常工作，所以在这里放东西之前要三思:-)注意，"),v,e(" 目录是确保私有包不可导入的更好方法，因为它是由 Go 强制执行的。"),w,e(" 目录仍然是一种很好的方式，可以显式地表示该目录中的代码对于其他人来说是安全使用的好方法。由 Travis Jeffery 撰写的 "),o("a",x,[E,n(t)]),e(" 博客文章提供了 "),j,e(" 和 "),P,e(" 目录的一个很好的概述，以及什么时候使用它们是有意义的。")]),o("p",null,[e("当根目录包含大量非 Go 组件和目录时，这也是一种将 Go 代码分组到一个位置的方法，这使得运行各种 Go 工具变得更加容易（正如在这些演讲中提到的那样: 来自 GopherCon EU 2018 的 "),o("a",M,[I,n(t)]),e(" , "),o("a",S,[e("GopherCon 2018: Kat Zien - How Do You Structure Your Go Apps"),n(t)]),e(" 和 "),o("a",A,[e("GoLab 2018 - Massimiliano Pippi - Project layout patterns in Go"),n(t)]),e(" ）。")]),o("p",null,[e("如果你想查看哪个流行的 Go 存储库使用此项目布局模式，请查看 "),o("a",L,[D,n(t)]),e(" 目录。这是一种常见的布局模式，但并不是所有人都接受它，一些 Go 社区的人也不推荐它。")]),N]),o("li",null,[B,o("p",null,[e("应用程序依赖项(手动管理或使用你喜欢的依赖项管理工具，如新的内置 "),o("a",V,[z,n(t)]),e(" 功能)。"),C,e(" 命令将为你创建 "),J,e(" 目录。请注意，如果未使用默认情况下处于启用状态的 Go 1.14，则可能需要在 "),R,e(" 命令中添加 "),T,e(" 标志。")]),U,o("p",null,[e("注意，自从 "),o("a",W,[H,n(t)]),e(" 以后，Go 还启用了模块代理功能(默认使用 "),o("a",O,[Y,n(t)]),e(" 作为他们的模块代理服务器)。在"),o("a",q,[K,n(t)]),e(" 阅读更多关于它的信息，看看它是否符合你的所有需求和约束。如果需要，那么你根本不需要 "),Q,e(" 目录。")]),o("p",null,[e("国内模块代理功能默认是被墙的，七牛云有维护专门的的"),o("a",Z,[F,n(t)]),e(" 。")])]),X,o("li",null,[$,oo,eo,o("p",null,[e("("),o("a",to,[no,n(t)]),e(")")])]),ro])])}const co=l(c,[["render",lo],["__file","Go Project Layout.html.vue"]]);export{co as default};
