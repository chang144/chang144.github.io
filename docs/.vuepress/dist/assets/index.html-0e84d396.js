import{_ as i,r as p,o as l,c as d,a as n,d as s,w as t,b as a,e as c}from"./app-f1c34f66.js";const u={},r=n("h1",{id:"hello-golang",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#hello-golang","aria-hidden":"true"},"#"),a(" hello Golang")],-1),k=n("h2",{id:"other-guide",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#other-guide","aria-hidden":"true"},"#"),a(" Other Guide")],-1),v=c(`<h2 id="程序结构" tabindex="-1"><a class="header-anchor" href="#程序结构" aria-hidden="true">#</a> 程序结构</h2><h3 id="_1-1-命名" tabindex="-1"><a class="header-anchor" href="#_1-1-命名" aria-hidden="true">#</a> 1.1 命名</h3><p>Go语言中的关键字</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>break      default       func     interface   select
case       defer         go       map         struct
chan       else          goto     package     switch
const      fallthrough   if       range       type
continue   for           import   return      var
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Go语言中还有大约30多个预定义的名字，对应内建的常量、类型和函数</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>内建常量: true false iota nil

内建类型: int int8 int16 int32 int64
          uint uint8 uint16 uint32 uint64 uintptr
          float32 float64 complex128 complex64
          bool byte rune string error

内建函数: make len cap new append copy close delete
          complex real imag
          panic recover
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>预定义名字可以重新定义使用它们，在一些特殊的场景中重新定义它们是有意义的。</p><p>名字（变量）的<strong>作用域</strong>，如何名字定义在函数内部，那么它就只在函数内部有效；如何是在函数外部定义，那么将在当前包的所有文件都可以访问。</p><p>名字的<strong>可见性</strong>，由它的首字母的大小写决定，如果一个名字是大写字母开头，那么它将是可导出的；反之</p><p>Go语言的风格中进来使用短小的名字，对应局部变量也是这样，例如：<code>i</code>；如果一个名字的作用域大，且生命周期长，那么用长的名字会更有意义</p><p>习惯上，Go使用<strong>驼峰式</strong>命名，当名字由几个单词组成时优先使用大小写分隔，</p><h3 id="_1-2-声明" tabindex="-1"><a class="header-anchor" href="#_1-2-声明" aria-hidden="true">#</a> 1.2 声明</h3><p>Go语言主要有四种类型的声明语句：<code>var</code>、 <code>const</code>、 <code>type</code>、 <code>func</code> 分别对应变量，常量，类型，和函数实体对象</p><p>Go程序中有多个以<code>.go</code>源文件，每个源文件中以包的声明语句开始，说明该源文件是属于哪个包。包声明后是<code>import</code>语句导入依赖的其他包，然后是包一级的类型、变量、常量、函数的声明语句</p><h3 id="_1-3变量" tabindex="-1"><a class="header-anchor" href="#_1-3变量" aria-hidden="true">#</a> 1.3变量</h3><p><code>var</code>声明语句可以创建一个特定类型的变量，然后给变量附加一个名字，并且变量的初始值，声明如下</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>var &lt;valueName&gt; type = 表达式
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h2 id="复合数据类型" tabindex="-1"><a class="header-anchor" href="#复合数据类型" aria-hidden="true">#</a> 复合数据类型</h2><h3 id="_4-2slice" tabindex="-1"><a class="header-anchor" href="#_4-2slice" aria-hidden="true">#</a> 4.2Slice</h3><p>Slice(切片)代表变长的序列，序列中每个元素都有相同的类型。slice的语法和数值很像，只是没有固定长度</p><p>一个slice是一个轻量级的数据类型，提供了访问数组子序列元素的功能，而且slice的底层确实是一个<strong>数组对象</strong>。</p><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code><span class="token keyword">type</span> Slice <span class="token keyword">struct</span> <span class="token punctuation">{</span>
    array unsafa<span class="token punctuation">.</span>Pointer
    <span class="token builtin">len</span> <span class="token builtin">int</span>
    <span class="token builtin">cap</span> <span class="token builtin">int</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_4-3map" tabindex="-1"><a class="header-anchor" href="#_4-3map" aria-hidden="true">#</a> 4.3Map</h3><p>在Go语言中，一个map就是一个哈希表的引用。</p><p>使用内置的<code>make</code>函数创建一个map</p><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code>m <span class="token operator">:=</span> <span class="token function">make</span><span class="token punctuation">(</span><span class="token keyword">map</span><span class="token punctuation">[</span><span class="token builtin">string</span><span class="token punctuation">]</span><span class="token builtin">int</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h4 id="_4-3-1-sync-map" tabindex="-1"><a class="header-anchor" href="#_4-3-1-sync-map" aria-hidden="true">#</a> 4.3.1 sync.Map</h4><p><code>sync.Map</code> 是Go语言标准库中一个并发安全的Map实现，可以在并发情况下安全地读写，而不用加锁</p><p>官方文档对使用<code>sync.Map</code>的建议：</p><ul><li>多个goroutine的并发使用是安全的，不需要额外的锁定或协调扩控制</li><li>大多数代码应该使用原生的map，而不是单独的锁定或协调控制，以获得更好的类型安全性和维护性</li></ul><p>结构体定义</p><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code><span class="token keyword">type</span> Map <span class="token keyword">struct</span> <span class="token punctuation">{</span>
    mu 		sync<span class="token punctuation">.</span>Mutex
    read 	atomic<span class="token punctuation">.</span>Value <span class="token comment">//readOnly</span>
    dirty 	<span class="token keyword">map</span><span class="token punctuation">[</span><span class="token keyword">interface</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">]</span><span class="token keyword">interface</span><span class="token punctuation">{</span><span class="token punctuation">}</span>
    misses 	<span class="token builtin">int</span>
    dirtyLocked <span class="token builtin">uintptr</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>可以看出<code>sync.map</code>的实现依赖于一个互斥锁<code>sync.Mutex</code>和两个map——<code>read</code>和<code>dirty</code></p><p><code>read</code>的定义如下：</p><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code><span class="token keyword">type</span> readOnly <span class="token keyword">struct</span> <span class="token punctuation">{</span>
    m		<span class="token keyword">map</span><span class="token punctuation">[</span><span class="token keyword">interface</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">]</span><span class="token keyword">interface</span><span class="token punctuation">{</span><span class="token punctuation">}</span> <span class="token comment">// map类型</span>
    amended <span class="token builtin">bool</span> <span class="token comment">// amended表示read中键值对是否被修改</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><code>dirty</code>的定义：</p><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code><span class="token keyword">type</span> dirty <span class="token keyword">struct</span> <span class="token punctuation">{</span>
    m	    <span class="token keyword">map</span><span class="token punctuation">[</span><span class="token keyword">interface</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">]</span><span class="token keyword">interface</span><span class="token punctuation">{</span><span class="token punctuation">}</span> <span class="token comment">// 存储被修改过的键值对</span>
    dirty	<span class="token keyword">map</span><span class="token punctuation">[</span><span class="token keyword">interface</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">]</span><span class="token builtin">bool</span>	    <span class="token comment">// 存储了那些键值对被修改过</span>
	misses  <span class="token builtin">int</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>读取的实现<code>Load()</code>：直接在<code>readOnly</code>中的m查找，如果<code>readOnly</code>中的键值被修改过，则需要从<code>dirty</code>中查找</li><li>写入的实现<code>Store()</code>：分两步实现，首先判断<code>readOnly</code>中的键值对是否被修改，如果没有被修改过，则直接将键值对添加到<code>readOnly</code>的<code>m</code>中，否则，获取互斥锁，将键值对添加到<code>dirty</code>中的<code>m</code>中，并将对应的键添加到<code>dirty</code>中的<code>dirty</code>中</li><li>删除的实现<code>Delete()</code>：分两步实现，首先判断<code>readOnly</code>中的键值对是否被修改，如果没有被修改过，直接从<code>readOnly</code>中的<code>m</code>中删除键值对即可，否则，获取互斥锁，如何将键添加到<code>dirty</code>中的<code>dirty</code>中，并将<code>dirty</code>中的对应件的值设置为false</li><li>遍历的实现<code>range()</code>：需要将<code>readOnly</code>和<code>dirty</code>中的所有键值对进行合并，并返回所有未被删除的键值对</li></ul><p><code>sync.Map</code>建议使用场景：在读和删较多的场景上表现很好，但是在写入场景上的性能很差</p>`,39),m=n("p",null,"推荐阅读：",-1),h={href:"https://juejin.cn/post/7226604941727596581",target:"_blank",rel:"noopener noreferrer"},b={href:"https://juejin.cn/post/7011355673069879304",target:"_blank",rel:"noopener noreferrer"},g=c(`<h2 id="函数" tabindex="-1"><a class="header-anchor" href="#函数" aria-hidden="true">#</a> 函数</h2><h3 id="_5-8deffered函数" tabindex="-1"><a class="header-anchor" href="#_5-8deffered函数" aria-hidden="true">#</a> 5.8Deffered函数</h3><p>只要在调用的普通函数或方法前加上关键字<code>defer</code>，就完成了defer所需的语法</p><p><code>defer</code>语句经常被用于处理成对的操作，如打开、关闭、连接、断开连接、加锁、释放锁</p><h4 id="defer底层原理" tabindex="-1"><a class="header-anchor" href="#defer底层原理" aria-hidden="true">#</a> defer底层原理</h4><ol><li>每次<code>defer</code>语句执行时，会对函数进行<strong>压栈</strong>，函数参数会被拷贝下来，当外层函数退出时，defer的函数按定义的顺序逆序执行。当defer的函数为<code>nil</code>时，会产生panic</li><li><code>defer</code>函数定义时，对外部变量的引用有两种方式： 分别是<strong>函数参数</strong>以及<strong>闭包引用</strong><ul><li>作函数参数时，在<code>defer</code>定义时，会被缓存起来</li><li>作闭包引用时，则在<code>defer</code>真正调用时，根据上下文确定当前的值</li></ul></li><li><code>defer</code>后面的语句在执行的时候，函数调用的参数会被保存起来，即（复制一份</li></ol><h3 id="_5-9panic异常" tabindex="-1"><a class="header-anchor" href="#_5-9panic异常" aria-hidden="true">#</a> 5.9Panic异常</h3><p>Go的类型系统会在编译时捕获很多错误，但有些错误只能在运行时检查，如数组访问越界、空指针引用等。这些运行时错误会引起painc异常。</p><p>当panic异常发生时，程序会中断运行，并立即执行在该goroutine中被延迟的函数（defer机制）</p><p>由于panic会引起程序的崩溃，因此panic一般用于严重错误</p><h3 id="_5-10recover捕获异常" tabindex="-1"><a class="header-anchor" href="#_5-10recover捕获异常" aria-hidden="true">#</a> 5.10Recover捕获异常</h3><p>在defer函数中调用了内置函数<strong>recover</strong>，并且定义该defer语句的函数发生了panic异常，recover会使程序从panic中恢复，并返回panic value</p><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code><span class="token keyword">func</span> <span class="token function">Parse</span><span class="token punctuation">(</span>input <span class="token builtin">string</span><span class="token punctuation">)</span> <span class="token punctuation">(</span>r <span class="token operator">*</span>Syntax<span class="token punctuation">,</span> err <span class="token builtin">error</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">defer</span> <span class="token keyword">func</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">if</span> p <span class="token operator">:=</span> <span class="token function">recover</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> p <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>
            err <span class="token operator">=</span> fmt<span class="token punctuation">.</span><span class="token function">Errorf</span><span class="token punctuation">(</span><span class="token string">&quot;internal error: %v&quot;</span><span class="token punctuation">,</span> p<span class="token punctuation">)</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token comment">// ...parser...</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="goroutine和channels" tabindex="-1"><a class="header-anchor" href="#goroutine和channels" aria-hidden="true">#</a> Goroutine和Channels</h2><h3 id="_8-4channels" tabindex="-1"><a class="header-anchor" href="#_8-4channels" aria-hidden="true">#</a> 8.4Channels</h3><p>使用内置的<code>make</code>函数，可以创建一个channel：</p><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code>ch <span class="token operator">:=</span> <span class="token function">make</span><span class="token punctuation">(</span><span class="token keyword">chan</span> <span class="token builtin">int</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>与<code>map</code>类似，channel对应一个make创建的底层数据结构的引用</p><p>channel的两个操作：发送和接收</p><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code>ch <span class="token operator">&lt;-</span> x
x <span class="token operator">=</span> <span class="token operator">&lt;-</span> ch
<span class="token operator">&lt;-</span>ch
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>channel还支持<code>close</code>操作，用于关闭channel，后续对该channel进行任何发送操作<code>close(ch)</code></p><p>创建带缓存的channel</p><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code>ch <span class="token operator">=</span> <span class="token function">make</span><span class="token punctuation">(</span><span class="token keyword">chan</span> <span class="token builtin">int</span><span class="token punctuation">)</span> <span class="token comment">// unbuffered channel</span>
ch <span class="token operator">=</span> <span class="token function">make</span><span class="token punctuation">(</span><span class="token keyword">chan</span> <span class="token builtin">int</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token comment">// unbuffered channel</span>
ch <span class="token operator">=</span> <span class="token function">make</span><span class="token punctuation">(</span><span class="token keyword">chan</span> <span class="token builtin">int</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">)</span> <span class="token comment">// buffered channel with capacity 10</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="_8-4-1-不带缓存的channels" tabindex="-1"><a class="header-anchor" href="#_8-4-1-不带缓存的channels" aria-hidden="true">#</a> 8.4.1 不带缓存的channels</h4><p>一个基于<strong>无缓存</strong>的Channel的发送操作会导致发生在goroutine阻塞，直到另一个goroutine在同一个Channels上执行接收操作。反之。</p><p>无缓存的Channels的发送和接收操作将导致两个goroutine进行一次同步操作。因此，无缓存Channels也称为同步Channels。</p><blockquote><p>这里插播一个在go语言中<strong>空结构体</strong>的妙用：</p><p>空结构体，匿名空结构体：</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>var e struct{}
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>或者命名空结构体：</p><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code><span class="token keyword">type</span> EmptyStruct <span class="token keyword">struct</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>
<span class="token keyword">var</span> e EmptyStruct
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>它有一下特点：</p><ul><li>零内存占用：空结构体不占用任何内存空间</li><li>地址相同：空结构体所指向的地址都相同</li><li>无状态：不包含任何字段，所以它没有状态</li></ul><p>使用场景：</p><ul><li>实现<code>set</code>集合类型</li><li>同于通道信号</li><li>作为方法接收器</li></ul></blockquote><h4 id="_8-4-2串联的channels-pipeline" tabindex="-1"><a class="header-anchor" href="#_8-4-2串联的channels-pipeline" aria-hidden="true">#</a> 8.4.2串联的Channels（Pipeline）</h4><p>Channels也可以用于将多个goroutine连接在一起，一个Channel的输出作为下一个Channel的输入</p><p>这种串联的Channels就是所谓的管道（pipeline）</p><h4 id="_8-4-3单方向的channel" tabindex="-1"><a class="header-anchor" href="#_8-4-3单方向的channel" aria-hidden="true">#</a> 8.4.3单方向的Channel</h4><p>Go语言的类型系统提供了单方向的channel类型</p><ul><li><code>chan &lt;- int</code>表示一个<strong>只发送</strong><code>int</code>的channel</li><li><code>&lt;- chan int</code>表示一个<strong>只接收</strong><code>int</code>的channel</li></ul><p>channels的关闭操作只用于断言不再向channel发送新的数据，所以在发送者所在的goroutine才能调用<code>close</code>函数关闭channel，负责接收者的channel调用<code>close</code>将回收一个编译错误</p><h4 id="_8-4-4-带缓存的channels" tabindex="-1"><a class="header-anchor" href="#_8-4-4-带缓存的channels" aria-hidden="true">#</a> 8.4.4 带缓存的Channels</h4><p>带缓存的channel内部持有一个元素队列。队列的最大容量有<code>make</code>函数的第二个参数决定</p><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code>ch <span class="token operator">=</span> <span class="token function">make</span><span class="token punctuation">(</span><span class="token keyword">chan</span> <span class="token builtin">int</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>向缓存Channel的发送操作就是向内部缓存队列的尾部插入元素，接收操作则是从队列的头部删除元素</p><p>如果内部缓存队列是满的，新的发送操作将阻塞直到有另一个goroutine执行接收操作而释放了新的队列空间</p><p>当缓存队列既不是空也不是满的状态时，对该channel执行的发送或者接收操作都不会发送阻塞。通过这个方法，channel的缓存队列解耦了接收和发送的goroutine</p><p>通过<code>cap</code>函数，可以获取到channel内部缓存的容量；通过<code>len</code>函数，可获取到channel内部缓存的有效元素个数</p><h3 id="_8-5并发的循环" tabindex="-1"><a class="header-anchor" href="#_8-5并发的循环" aria-hidden="true">#</a> 8.5并发的循环</h3>`,42),f={href:"https://books.studygolang.com/gopl-zh/ch8/ch8-05.html",target:"_blank",rel:"noopener noreferrer"},y=c(`<div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code><span class="token comment">// makeThumbnails6 makes thumbnails for each file received from the channel.</span>
<span class="token comment">// It returns the number of bytes occupied by the files it creates.</span>
<span class="token keyword">func</span> <span class="token function">makeThumbnails6</span><span class="token punctuation">(</span>filenames <span class="token operator">&lt;-</span><span class="token keyword">chan</span> <span class="token builtin">string</span><span class="token punctuation">)</span> <span class="token builtin">int64</span> <span class="token punctuation">{</span>
    sizes <span class="token operator">:=</span> <span class="token function">make</span><span class="token punctuation">(</span><span class="token keyword">chan</span> <span class="token builtin">int64</span><span class="token punctuation">)</span>
    <span class="token keyword">var</span> wg sync<span class="token punctuation">.</span>WaitGroup <span class="token comment">// number of working goroutines</span>
    <span class="token keyword">for</span> f <span class="token operator">:=</span> <span class="token keyword">range</span> filenames <span class="token punctuation">{</span>
        wg<span class="token punctuation">.</span><span class="token function">Add</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>
        <span class="token comment">// worker</span>
        <span class="token keyword">go</span> <span class="token keyword">func</span><span class="token punctuation">(</span>f <span class="token builtin">string</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">defer</span> wg<span class="token punctuation">.</span><span class="token function">Done</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
            thumb<span class="token punctuation">,</span> err <span class="token operator">:=</span> thumbnail<span class="token punctuation">.</span><span class="token function">ImageFile</span><span class="token punctuation">(</span>f<span class="token punctuation">)</span>
            <span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>
                log<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span>
                <span class="token keyword">return</span>
            <span class="token punctuation">}</span>
            info<span class="token punctuation">,</span> <span class="token boolean">_</span> <span class="token operator">:=</span> os<span class="token punctuation">.</span><span class="token function">Stat</span><span class="token punctuation">(</span>thumb<span class="token punctuation">)</span> <span class="token comment">// OK to ignore error</span>
            sizes <span class="token operator">&lt;-</span> info<span class="token punctuation">.</span><span class="token function">Size</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
        <span class="token punctuation">}</span><span class="token punctuation">(</span>f<span class="token punctuation">)</span>
    <span class="token punctuation">}</span>

    <span class="token comment">// closer</span>
    <span class="token keyword">go</span> <span class="token keyword">func</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        wg<span class="token punctuation">.</span><span class="token function">Wait</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
        <span class="token function">close</span><span class="token punctuation">(</span>sizes<span class="token punctuation">)</span>
    <span class="token punctuation">}</span><span class="token punctuation">(</span><span class="token punctuation">)</span>

    <span class="token keyword">var</span> total <span class="token builtin">int64</span>
    <span class="token keyword">for</span> size <span class="token operator">:=</span> <span class="token keyword">range</span> sizes <span class="token punctuation">{</span>
        total <span class="token operator">+=</span> size
    <span class="token punctuation">}</span>
    <span class="token keyword">return</span> total
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_8-7基于select的多路复用" tabindex="-1"><a class="header-anchor" href="#_8-7基于select的多路复用" aria-hidden="true">#</a> 8.7基于select的多路复用</h3><p>使用多路复用的<code>select</code>语句，能够解决在一个goroutine中接收多个channel中的信息，且不会因为第一个channel中没有事件发送导致的阻塞</p><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code><span class="token keyword">select</span> <span class="token punctuation">{</span>
<span class="token keyword">case</span> <span class="token operator">&lt;-</span> ch1<span class="token punctuation">:</span>
	<span class="token comment">// ...</span>
<span class="token keyword">case</span> <span class="token operator">&lt;-</span> ch2<span class="token punctuation">:</span>
	<span class="token comment">// ...</span>
<span class="token keyword">default</span><span class="token punctuation">:</span>
	<span class="token comment">/// ...</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li><code>select</code>语句与<code>switch</code>语句类似</li><li>每个case表示一个通信操作</li><li>当多个case同时满足时，select会随机选择一个执行</li></ul><blockquote><p>channel的<strong>nil</strong>作用：对于一个nil的channel发送和接收操作会被永远阻塞，在<code>select</code>语句中操作nil的channel永远不会被select到</p><p>这样，我们可以使用nil来激活或者禁用一个<strong>case</strong></p></blockquote><h3 id="_8-9并发的退出" tabindex="-1"><a class="header-anchor" href="#_8-9并发的退出" aria-hidden="true">#</a> 8.9并发的退出</h3><p>采用广播机制：用关闭一个channel来进行广播</p><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code><span class="token keyword">var</span> done <span class="token operator">=</span> <span class="token function">make</span><span class="token punctuation">(</span><span class="token keyword">chan</span> <span class="token keyword">struct</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">)</span>

<span class="token keyword">func</span> <span class="token function">cancelled</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token builtin">bool</span> <span class="token punctuation">{</span>
	<span class="token keyword">select</span> <span class="token punctuation">{</span>
	<span class="token keyword">case</span> <span class="token operator">&lt;-</span> done<span class="token punctuation">:</span>
		<span class="token keyword">return</span> <span class="token boolean">true</span>
	<span class="token keyword">default</span><span class="token punctuation">:</span>
		<span class="token keyword">return</span> <span class="token boolean">false</span>
	<span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token keyword">func</span> <span class="token function">closeChannel</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">go</span> <span class="token keyword">func</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        os<span class="token punctuation">.</span>Stdin<span class="token punctuation">.</span><span class="token function">Read</span><span class="token punctuation">(</span><span class="token function">make</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">byte</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
        <span class="token function">close</span><span class="token punctuation">(</span>done<span class="token punctuation">)</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="基于共享变量的并发" tabindex="-1"><a class="header-anchor" href="#基于共享变量的并发" aria-hidden="true">#</a> 基于共享变量的并发</h2><h3 id="_9-1竞争条件" tabindex="-1"><a class="header-anchor" href="#_9-1竞争条件" aria-hidden="true">#</a> 9.1竞争条件</h3><p><strong>竞争条件</strong>指的是程序在多个goroutine交叉执行操作时，没有给出正确的结果</p><p>一个常见的竞争条件案例是银行账户程序</p><h3 id="_9-2-sync-mutex-互斥锁" tabindex="-1"><a class="header-anchor" href="#_9-2-sync-mutex-互斥锁" aria-hidden="true">#</a> 9.2 sync.Mutex 互斥锁</h3><p>go语言直接提供<code>sync.Mutex</code>类型支持互斥锁，</p><ul><li><code>Lock()</code>：获得token（锁）</li><li><code>Unlock()</code>：释放token</li></ul><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code><span class="token keyword">import</span> <span class="token string">&quot;sync&quot;</span>

<span class="token keyword">var</span> <span class="token punctuation">(</span>
	mu sync<span class="token punctuation">.</span>Mutex
	balance <span class="token builtin">int</span>
<span class="token punctuation">)</span>

<span class="token keyword">func</span> <span class="token function">Deposit</span><span class="token punctuation">(</span>amount <span class="token builtin">int</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    mu<span class="token punctuation">.</span><span class="token function">Lock</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token keyword">defer</span> mu<span class="token punctuation">.</span><span class="token function">Unlock</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    balance <span class="token operator">=</span> balance <span class="token operator">+</span> amount
<span class="token punctuation">}</span>

<span class="token keyword">func</span> <span class="token function">Balance</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token builtin">int</span> <span class="token punctuation">{</span>
    mu<span class="token punctuation">.</span><span class="token function">Lock</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    b <span class="token operator">:=</span> balance
    mu<span class="token punctuation">.</span><span class="token function">Unlock</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token keyword">return</span> b
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><blockquote><p>Go的mutex不能<strong>重入</strong></p></blockquote><h3 id="_9-3-sync-rwmutex读写锁" tabindex="-1"><a class="header-anchor" href="#_9-3-sync-rwmutex读写锁" aria-hidden="true">#</a> 9.3 sync.RWMutex读写锁</h3><p>一种特殊类型的锁，其允许多个只读操作并行执行，但写操作会完全互斥。这种锁叫作“多读单写”锁（multiple readers, single writer lock）</p><p>Go语言提供的这样的锁是sync.RWMutex：</p><ul><li><code>RLock()</code>和<code>RUnlock()</code>获取和释放一个读取或者共享锁</li><li><code>Lock()</code>和<code>Unlock()</code>获取或释放一个写或者互斥锁</li></ul><p><code>RLock</code>只能在临界区共享变量没有任何写入操作时可用</p><h3 id="_9-4内存同步" tabindex="-1"><a class="header-anchor" href="#_9-4内存同步" aria-hidden="true">#</a> 9.4内存同步</h3><h3 id="_9-5-sync-once惰性初始化" tabindex="-1"><a class="header-anchor" href="#_9-5-sync-once惰性初始化" aria-hidden="true">#</a> 9.5 sync.Once惰性初始化</h3><p>Go语言中提供了<code>sync.Once</code>为我们提供了一个专门的方案来解决这种一次性初始化的问题</p><p>概念上：一次性的初始化需要一个互斥量mutex和一个Boolean变量来记录初始是不是完成</p><ul><li><code>Do</code>这个唯一的方法需要接收初始化函数作为其参数</li></ul><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code><span class="token keyword">var</span> once sync<span class="token punctuation">.</span>Once

<span class="token keyword">func</span> <span class="token function">loading</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token comment">// do something</span>
<span class="token punctuation">}</span>

<span class="token keyword">func</span> <span class="token function">A</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    once<span class="token punctuation">.</span><span class="token function">Do</span><span class="token punctuation">(</span>loading<span class="token punctuation">)</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>每一次对Do(loadIcons)的调用都会锁定mutex，并会检查boolean变量（译注：Go1.9中会先判断boolean变量是否为1(true)，只有不为1才锁定mutex，不再需要每次都锁定mutex）。</p><p>用这种方式来使用sync.Once的话，我们能够避免在变量被构建完成之前和其它goroutine共享该变量。</p><h3 id="_9-7goroutines和线程" tabindex="-1"><a class="header-anchor" href="#_9-7goroutines和线程" aria-hidden="true">#</a> 9.7Goroutines和线程</h3>`,32),x={href:"https://books.studygolang.com/gopl-zh/ch9/ch9-08.html",target:"_blank",rel:"noopener noreferrer"};function _(w,G){const e=p("RouterLink"),o=p("ExternalLinkIcon");return l(),d("div",null,[r,k,n("ul",null,[n("li",null,[s(e,{to:"/backend/Golang/001-go%E5%91%BD%E4%BB%A4%E8%A1%8C%E6%93%8D%E4%BD%9C.html"},{default:t(()=>[a("01-go命令行操作")]),_:1}),n("ul",null,[n("li",null,[s(e,{to:"/backend/Golang/001-01-go%20cli.html"},{default:t(()=>[a("01-01-go命令行程序设计原则")]),_:1})])])]),n("li",null,[s(e,{to:"/backend/Golang/Go%20Project%20Layout.html"},{default:t(()=>[a("02-goProjectLayout")]),_:1})]),n("li",null,[s(e,{to:"/backend/Golang/xxx-%E6%A0%87%E5%87%86%E5%BA%93.html"},{default:t(()=>[a("03-go标准库")]),_:1})]),n("li",null,[s(e,{to:"/backend/Golang/xxx-GraceGoProject.html"},{default:t(()=>[a("04-优雅的Go项目")]),_:1})]),n("li",null,[s(e,{to:"/backend/Golang/xxx-IAM%20Authz.html"},{default:t(()=>[a("05-IAM 认证")]),_:1})]),n("li",null,[s(e,{to:"/backend/Golang/rpc/"},{default:t(()=>[a("06-gRPC")]),_:1})])]),v,n("blockquote",null,[m,n("p",null,[n("a",h,[a("并发编程如此轻松：一篇文章深入探究 Go 语言中的 sync.Map！ - 掘金 (juejin.cn)"),s(o)])]),n("p",null,[n("a",b,[a("Go 并发读写 sync.map 的强大之处 - 掘金 (juejin.cn)"),s(o)])])]),g,n("p",null,[a("这里直接贴上并发的循环示例代码，有兴趣的同学自行前往"),n("a",f,[a("并发的循环 · Go语言圣经 (studygolang.com)"),s(o)]),a("阅读")]),y,n("p",null,[n("a",x,[a("Goroutines和线程 · Go语言圣经 (studygolang.com)"),s(o)])])])}const M=i(u,[["render",_],["__file","index.html.vue"]]);export{M as default};
