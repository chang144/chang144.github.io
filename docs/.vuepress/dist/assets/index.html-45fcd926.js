import{_ as s,o as n,c as a,e}from"./app-dc2a6862.js";const t={},o=e(`<h1 id="xxx-grpc" tabindex="-1"><a class="header-anchor" href="#xxx-grpc" aria-hidden="true">#</a> xxx - gRPC</h1><h2 id="简介" tabindex="-1"><a class="header-anchor" href="#简介" aria-hidden="true">#</a> 简介</h2><p>gRPC是一个高性能、开源、通用的RPC框架，由Google推出，基于HTTP2协议标准设计开发，默认采用<strong>Protocol Buffers</strong>数据序列化协议，支持多种开发语言</p><p>gRPC提供了一种简单的方法来精确的定义服务，并为客户端和服务端自动生成可靠的<strong>功能库</strong></p><h3 id="主要特性" tabindex="-1"><a class="header-anchor" href="#主要特性" aria-hidden="true">#</a> 主要特性：</h3><ul><li>IDL：gRPC使用ProtoBuf来定义服务</li><li>多语言支持：gRPC支持多语言，并能够基于语言自动生成客户端和服务端功能库</li><li>HTTP2：gRPC基于HTTP2标准设计，由更强大功能，例如：双向流，头部压缩，多复用请求</li></ul><h2 id="protobuf-go" tabindex="-1"><a class="header-anchor" href="#protobuf-go" aria-hidden="true">#</a> Protobuf --&gt; Go</h2><h3 id="了解protobuf" tabindex="-1"><a class="header-anchor" href="#了解protobuf" aria-hidden="true">#</a> 了解ProtoBuf</h3><blockquote><p>在proto文件中，默认使用proto2，如果要使用proto3，需要在文件前添加 <code>syntax = &quot;proto3&quot;;</code></p></blockquote><p>下面的例子以proto3为例</p><p><code>package</code>: 声明包名，默认转换为Go中的包名一致</p><p><code>go_package</code>：指定不一样的包名</p><div class="language-protobuf line-numbers-mode" data-ext="protobuf"><pre class="language-protobuf"><code><span class="token keyword">package</span> test<span class="token punctuation">;</span>
<span class="token keyword">option</span> go_package<span class="token operator">=</span><span class="token string">&quot;test&quot;</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p><code>message</code>：对应go中的<code>struct</code>，全部使用驼峰命名规则。嵌套定义的<code>message</code>, <code>enum</code>转换为go之后，名称变为<code>Parent_Child</code>结构</p><div class="language-protobuf line-numbers-mode" data-ext="protobuf"><pre class="language-protobuf"><code><span class="token keyword">syntax</span> <span class="token operator">=</span> <span class="token string">&quot;proto3&quot;</span><span class="token punctuation">;</span>
<span class="token keyword">package</span> test<span class="token punctuation">;</span>
<span class="token keyword">option</span> go_package<span class="token operator">=</span><span class="token string">&quot;test&quot;</span><span class="token punctuation">;</span>
<span class="token keyword">message</span> <span class="token class-name">Test</span> <span class="token punctuation">{</span>
  <span class="token builtin">string</span> name <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>
  <span class="token builtin">string</span> age <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>使用命令行</p><div class="language-cmd line-numbers-mode" data-ext="cmd"><pre class="language-cmd"><code>protoc --proto_path=./proto/ --go_out=./proto/*.proto
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><ul><li><code>proto_path</code> 用来表示编译的proto文件所依赖的其它proto文件的查找位置</li><li><code>go_out</code> 两次含义，一层输出go对应的文件，一层指定生成的go文件</li></ul><p>到这里，可以使用以上命令生成go文件了，注意两个参数的使用</p><h3 id="protobuf语法解析" tabindex="-1"><a class="header-anchor" href="#protobuf语法解析" aria-hidden="true">#</a> Protobuf语法解析</h3><blockquote><p>以<strong>proto3</strong>为例</p></blockquote><ul><li><code>Message</code></li></ul><p>类型定义描述了一个请求或响应的消息格式，可以包含多种类型字段</p><div class="language-protobuf line-numbers-mode" data-ext="protobuf"><pre class="language-protobuf"><code><span class="token keyword">syntax</span> <span class="token operator">=</span> <span class="token string">&quot;proto3&quot;</span><span class="token punctuation">;</span>
<span class="token keyword">message</span> <span class="token class-name">SearchRequest</span> <span class="token punctuation">{</span>
    <span class="token builtin">string</span> query <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>
    <span class="token builtin">int32</span>  page_number <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span>
    <span class="token builtin">int32</span>  result_per_page <span class="token operator">=</span> <span class="token number">3</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>一个<code>.proto</code>文件可以定义多个<code>message</code>，一般用于同时定义多个相关的message，例如可以在声明的proto文件里面添加另一个响应message <code>message SearchResponse {...}</code></p><p>message里面的<code>Tags</code>，这是每个字段都有一个<strong>唯一的数值标签</strong>，其中[1-15]内标识在编码时占用一个字节，包含标识和字段类型。 [16-2047]之间的标识符占用2个字节。频繁出现的消息元素建议分配在[1-15],可以预留标识</p><p>最小的标识符从1开始，最大到2^19-1。不可以使用[19000 - 19999]之间的标识符，Protobuf协议实现中预留了这些标识符。</p><p><strong>字段规则</strong></p><ul><li>单数形式：一个message内同名单数形态的字段不能超过一个</li><li>repeated：前置<code>repeated</code>关键词，声明该字段为数值类型</li><li><code>proto3</code>不支持<code>proto2</code>中的<code>required</code>和<code>optional</code>关键字</li></ul><p><strong>添加注释</strong>：使用双斜线<code>//</code></p><p><strong>保留字段</strong>：使用字段<code>reserved</code>关键字指定保留字段名和标签</p><div class="language-protobuf line-numbers-mode" data-ext="protobuf"><pre class="language-protobuf"><code><span class="token keyword">syntax</span> <span class="token operator">=</span> <span class="token string">&quot;proto3&quot;</span><span class="token punctuation">;</span>
<span class="token keyword">message</span> <span class="token class-name">Foo</span> <span class="token punctuation">{</span>
  <span class="token keyword">reserved</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">15</span><span class="token punctuation">,</span> <span class="token number">9</span> <span class="token keyword">to</span> <span class="token number">11</span><span class="token punctuation">;</span>
  <span class="token keyword">reserved</span> <span class="token string">&quot;foo&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;bar&quot;</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><blockquote><p>注意：不能在一个<code>reserved</code>声明中混合字段名和标签</p></blockquote><p><code>.proto</code>文件的编译结果</p><ul><li>Go: 生成一个.pb.go文件，每个消息类型对应一个结构体</li></ul><p>各种语言的更多的使用方法请参考官方API文档</p><p>基本数据类型对比：</p><h2 id="基本数据类型" tabindex="-1"><a class="header-anchor" href="#基本数据类型" aria-hidden="true">#</a> 基本数据类型</h2><table><thead><tr><th style="text-align:left;">.proto</th><th style="text-align:left;">Go</th></tr></thead><tbody><tr><td style="text-align:left;">double</td><td style="text-align:left;">float64</td></tr><tr><td style="text-align:left;">float</td><td style="text-align:left;">float32</td></tr><tr><td style="text-align:left;">int32</td><td style="text-align:left;">int32</td></tr><tr><td style="text-align:left;">int64</td><td style="text-align:left;">int64</td></tr><tr><td style="text-align:left;">uint32</td><td style="text-align:left;">uint32</td></tr><tr><td style="text-align:left;">uint64</td><td style="text-align:left;">uint64</td></tr><tr><td style="text-align:left;">sint32</td><td style="text-align:left;">int32</td></tr><tr><td style="text-align:left;">sint64</td><td style="text-align:left;">int64</td></tr><tr><td style="text-align:left;">fixed32</td><td style="text-align:left;">uint32</td></tr><tr><td style="text-align:left;">fixed64</td><td style="text-align:left;">uint64</td></tr><tr><td style="text-align:left;">sfixed32</td><td style="text-align:left;">int32</td></tr><tr><td style="text-align:left;">sfixed64</td><td style="text-align:left;">int64</td></tr><tr><td style="text-align:left;">bool</td><td style="text-align:left;">bool</td></tr><tr><td style="text-align:left;">string</td><td style="text-align:left;">string</td></tr><tr><td style="text-align:left;">bytes</td><td style="text-align:left;">[]byte</td></tr></tbody></table><ul><li><code>enum</code></li></ul><p>当定义一个message时，想要一个字段只能说一个预定好的值列表内的某个值，就需要使用enum类型</p><div class="language-protobuf line-numbers-mode" data-ext="protobuf"><pre class="language-protobuf"><code><span class="token keyword">syntax</span> <span class="token operator">=</span> <span class="token string">&quot;proto3&quot;</span><span class="token punctuation">;</span>
<span class="token keyword">message</span> <span class="token class-name">SearchRequest</span> <span class="token punctuation">{</span>
  <span class="token builtin">string</span> query <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>
  <span class="token builtin">int32</span> page_number <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span>
  <span class="token builtin">int32</span> result_per_page <span class="token operator">=</span> <span class="token number">3</span><span class="token punctuation">;</span>
  <span class="token comment">// 定义enum类型</span>
  <span class="token keyword">enum</span> <span class="token class-name">Corpus</span> <span class="token punctuation">{</span>
    UNIVERSAL <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
    WEB <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>
    IMAGES <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span>
    LOCAL <span class="token operator">=</span> <span class="token number">3</span><span class="token punctuation">;</span>
    NEWS <span class="token operator">=</span> <span class="token number">4</span><span class="token punctuation">;</span>
    PRODUCTS <span class="token operator">=</span> <span class="token number">5</span><span class="token punctuation">;</span>
    VIDEO <span class="token operator">=</span> <span class="token number">6</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
  <span class="token positional-class-name class-name">Corpus</span> corpus <span class="token operator">=</span> <span class="token number">4</span><span class="token punctuation">;</span> <span class="token comment">// 使用Corpus作为字段类型</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>每个enum类型值第一个元素必须是0</p><blockquote><p>使用<code>allow_alias</code>选项的值为<code>true</code>，可以同个给不同的enum元素赋相同的值来定义别名</p></blockquote><div class="language-protobuf line-numbers-mode" data-ext="protobuf"><pre class="language-protobuf"><code><span class="token keyword">syntax</span> <span class="token operator">=</span> <span class="token string">&quot;proto3&quot;</span><span class="token punctuation">;</span>
<span class="token comment">// 正确示例</span>
<span class="token keyword">enum</span> <span class="token class-name">EnumAllowingAlias</span> <span class="token punctuation">{</span>
  <span class="token keyword">option</span> allow_alias <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span> <span class="token comment">// 开启allow_alias选项</span>
  UNKNOWN <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
  STARTED <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>
  RUNNING <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>  <span class="token comment">// RUNNING和STARTED互为别名</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>使用其它Message作为字段</p><div class="language-protobuf line-numbers-mode" data-ext="protobuf"><pre class="language-protobuf"><code><span class="token keyword">syntax</span> <span class="token operator">=</span> <span class="token string">&quot;proto3&quot;</span><span class="token punctuation">;</span>
<span class="token keyword">message</span> <span class="token class-name">SearchResponse</span> <span class="token punctuation">{</span>
    <span class="token keyword">repeated</span> <span class="token positional-class-name class-name">Result</span> results <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token keyword">message</span> <span class="token class-name">Result</span> <span class="token punctuation">{</span>
    <span class="token builtin">string</span> url <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>
    <span class="token builtin">string</span> title <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span>
    <span class="token keyword">repeated</span> <span class="token builtin">string</span> snippets <span class="token operator">=</span> <span class="token number">3</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li><code>import</code></li></ul><p>导入其它<code>.proto</code>文件中的<code>message</code></p><div class="language-protobuf line-numbers-mode" data-ext="protobuf"><pre class="language-protobuf"><code><span class="token keyword">import</span> <span class="token string">&quot;others.proto&quot;</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><blockquote><p>可以在<code>import</code>后面添加一个<code>public</code>关键字，转发所有对新文件的引用</p></blockquote><p>使用了多proto文件的引用，在编译时可以添加上<code>-I / --proto_path</code>参数指定查找目录，如果没有指定该参数，默认在当前目录中查找</p><ul><li><code>message</code>嵌套</li></ul><p>在一个message内部中定义另一个message类型，作为子message</p><div class="language-protobuf line-numbers-mode" data-ext="protobuf"><pre class="language-protobuf"><code><span class="token keyword">syntax</span> <span class="token operator">=</span> <span class="token string">&quot;proto3&quot;</span><span class="token punctuation">;</span>
<span class="token keyword">message</span> <span class="token class-name">SearchResponse</span> <span class="token punctuation">{</span>
  <span class="token keyword">message</span> <span class="token class-name">Result</span> <span class="token punctuation">{</span>
    <span class="token builtin">string</span> url <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>
    <span class="token builtin">string</span> title <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span>
    <span class="token keyword">repeated</span> <span class="token builtin">string</span> snippets <span class="token operator">=</span> <span class="token number">3</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
  <span class="token keyword">repeated</span> <span class="token positional-class-name class-name">Result</span> results <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>这里的<code>Result</code>作为<code>SearchResponse</code>的子message，通过编译后，生成的结构体(struct)名为<code>SearchResponse_Result</code></p><p>内部声明的message类型只可以在内部直接使用，在外部使用需要前置父级message名称，例如<code>Parent.Type</code></p><ul><li><code>Map</code>类型</li></ul><p>proto3支持map类型声明</p><div class="language-protobuf line-numbers-mode" data-ext="protobuf"><pre class="language-protobuf"><code><span class="token keyword">syntax</span> <span class="token operator">=</span> <span class="token string">&quot;proto3&quot;</span><span class="token punctuation">;</span>
<span class="token comment">//map&lt;key_type, value_type&gt; map_field = N;</span>
<span class="token keyword">message</span> <span class="token class-name">Project</span> <span class="token punctuation">{</span>
  <span class="token builtin">string</span> name <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> 
<span class="token punctuation">}</span>

<span class="token map class-name">map<span class="token punctuation">&lt;</span><span class="token builtin">string</span><span class="token punctuation">,</span> Project<span class="token punctuation">&gt;</span></span> projects <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><blockquote><ul><li>key_type类型可以是内置的标量类型(除浮点类型和bytes)</li><li>value_type可以是除map以外的任意类型</li><li>map字段不支持repeated属性</li><li>不要依赖map类型的字段顺序</li></ul></blockquote><ul><li><code>package</code> 在<code>.proto</code>文件中使用<code>package</code>声明包名，避免命名冲突</li></ul><div class="language-protobuf line-numbers-mode" data-ext="protobuf"><pre class="language-protobuf"><code><span class="token keyword">syntax</span> <span class="token operator">=</span> <span class="token string">&quot;proto3&quot;</span><span class="token punctuation">;</span>
<span class="token keyword">package</span> foo<span class="token punctuation">.</span>bar<span class="token punctuation">;</span>
<span class="token keyword">message</span> <span class="token class-name">Open</span> <span class="token punctuation">{</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在其它的消息格式定义中可以使用<strong>包名+消息名</strong>的方式来使用类型</p><div class="language-protobuf line-numbers-mode" data-ext="protobuf"><pre class="language-protobuf"><code><span class="token keyword">syntax</span> <span class="token operator">=</span> <span class="token string">&quot;proto3&quot;</span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token string">&quot;foo.bar.proto&quot;</span>
<span class="token keyword">message</span> <span class="token class-name">Foo</span> <span class="token punctuation">{</span>
    <span class="token positional-class-name class-name">foo<span class="token punctuation">.</span>bar<span class="token punctuation">.</span>Open</span> open <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><blockquote><p>Go 中：默认使用package名作为包名，除非指定了option go_package选项</p></blockquote><ul><li><code>Service</code></li></ul><p>如果在消息类型用在RPC（远程方法调用）系统中，可以在<code>.proto</code>文件中定义一个RPC服务接口，protocol编译器会根据所选择的不同语言生成服务接口代码</p><p>例如：定义一个RPC服务并实现一个方法，该方法接收<code>SearchRequest</code>并返回一个<code>SearchResponse</code>,此时可以在<code>.proto</code>文件中进行如下定义</p><div class="language-protobuf line-numbers-mode" data-ext="protobuf"><pre class="language-protobuf"><code><span class="token keyword">syntax</span> <span class="token operator">=</span> <span class="token string">&quot;proto3&quot;</span><span class="token punctuation">;</span>
<span class="token keyword">service</span> <span class="token class-name">SearchService</span> <span class="token punctuation">{</span>
  <span class="token keyword">rpc</span> <span class="token function">Search</span> <span class="token punctuation">(</span><span class="token class-name">SearchRequest</span><span class="token punctuation">)</span> <span class="token keyword">returns</span> <span class="token punctuation">(</span><span class="token class-name">SearchResponse</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>生成的接口代码作为客户端与服务端的约定，<strong>服务端必须实现定义的所有接口方法</strong>，<strong>客户端直接调用同名方法向服务端发起请求</strong></p><ul><li><code>options</code> 在定义<code>.proto</code>文件时可以标注一系列的options。Options并不改变整个文件声明的含义，但是可以影响特定环境下处理方式</li></ul><blockquote><p>完整的可用选项可以查看google/protobuf/descriptor.proto.</p></blockquote><h4 id="基本规范" tabindex="-1"><a class="header-anchor" href="#基本规范" aria-hidden="true">#</a> 基本规范</h4><ul><li>描述文件以<code>.proto</code>作为文件后缀</li><li>Message命名采用驼峰命名的方式，字段命名采用小写加<code>_</code>分隔方式</li></ul><div class="language-protobuf line-numbers-mode" data-ext="protobuf"><pre class="language-protobuf"><code><span class="token keyword">syntax</span> <span class="token operator">=</span> <span class="token string">&quot;proto3&quot;</span><span class="token punctuation">;</span>
<span class="token keyword">message</span> <span class="token class-name">SongServerRequest</span> <span class="token punctuation">{</span>
  <span class="token keyword">required</span> <span class="token builtin">string</span> song_name <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>Enums类型名采用驼峰命名方式，字段命名采用大写字母加<code>_</code>分隔方式</li></ul><div class="language-protobuf line-numbers-mode" data-ext="protobuf"><pre class="language-protobuf"><code><span class="token keyword">syntax</span> <span class="token operator">=</span> <span class="token string">&quot;proto3&quot;</span><span class="token punctuation">;</span>
<span class="token keyword">enum</span> <span class="token class-name">Foo</span> <span class="token punctuation">{</span>
  FIRST_VALUE <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>
  SECOND_VALUE <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>Service名称与RPC方法名统一采用驼峰式命名</li></ul><h4 id="编译" tabindex="-1"><a class="header-anchor" href="#编译" aria-hidden="true">#</a> 编译</h4><p>参考Github项目google/protobuf安装编译器</p><div class="language-cmd line-numbers-mode" data-ext="cmd"><pre class="language-cmd"><code>protoc --proto_path=IMPORT_PATH --cpp_out=DST_DIR --java_out=DST_DIR --python_out=DST_DIR --go_out=DST_DIR --ruby_out=DST_DIR --javanano_out=DST_DIR --objc_out=DST_DIR --csharp_out=DST_DIR path/to/file.proto
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><blockquote><p>有关编译细节，将在后续补充详细 to be continued</p></blockquote>`,83),p=[o];function l(c,i){return n(),a("div",null,p)}const u=s(t,[["render",l],["__file","index.html.vue"]]);export{u as default};
