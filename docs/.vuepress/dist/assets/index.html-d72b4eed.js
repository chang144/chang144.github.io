import{_ as n,o as a,c as s,e}from"./app-d23692c0.js";const i={},o=e(`<h1 id="golang-面试题" tabindex="-1"><a class="header-anchor" href="#golang-面试题" aria-hidden="true">#</a> Golang 面试题</h1><h2 id="go基础类" tabindex="-1"><a class="header-anchor" href="#go基础类" aria-hidden="true">#</a> Go基础类</h2><h3 id="_0-go语言的好处" tabindex="-1"><a class="header-anchor" href="#_0-go语言的好处" aria-hidden="true">#</a> 0.Go语言的好处？</h3><ul><li>对并发做了优化，在规模上运行良好</li><li>标准代码格式，比其他语言的代码更具可读性</li><li>自动垃圾收集比java、python更有效，可以与程序同时执行</li></ul><h3 id="_1-golang使用的数据类型" tabindex="-1"><a class="header-anchor" href="#_1-golang使用的数据类型" aria-hidden="true">#</a> 1.Golang使用的数据类型？</h3><ul><li>Method</li><li>Bool</li><li>String</li><li>Array</li><li>Slice</li><li>Struct</li><li>Pointer</li><li>Function</li><li>Interface</li><li>Map</li><li>Channel</li></ul><h3 id="_2-go程序中的包是什么" tabindex="-1"><a class="header-anchor" href="#_2-go程序中的包是什么" aria-hidden="true">#</a> 2.Go程序中的包是什么？</h3><p><code>pkg</code>是Go工作区中包含Go源文件或其他包的目录</p><h3 id="_3-go支持什么形式的类型转换-将整数转换为浮点数" tabindex="-1"><a class="header-anchor" href="#_3-go支持什么形式的类型转换-将整数转换为浮点数" aria-hidden="true">#</a> 3.Go支持什么形式的类型转换？将整数转换为浮点数</h3><p>Go支持显式类型转换以满足其严格的类型要求</p><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code><span class="token function">int</span><span class="token punctuation">(</span>double<span class="token punctuation">)</span> <span class="token comment">// double转换为int</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h3 id="_4-goroutine-怎么停止" tabindex="-1"><a class="header-anchor" href="#_4-goroutine-怎么停止" aria-hidden="true">#</a> 4.Goroutine? 怎么停止</h3><p>Goroutine 线程比标准线程更轻量级，大多数 Golang 程序同时使用数千个 Goroutine。</p><p>创建goroutine，使用<code>go</code>在函数声明之前添加关键字</p><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code><span class="token keyword">go</span> <span class="token function">f</span><span class="token punctuation">(</span>x<span class="token punctuation">,</span> y<span class="token punctuation">,</span> z<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>通过一个<code>quit</code>信号通道来停止它，使用<code>chan</code></p><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code><span class="token keyword">package</span> main

<span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token punctuation">{</span>
    quit <span class="token operator">:=</span> <span class="token function">make</span><span class="token punctuation">(</span><span class="token keyword">chan</span> <span class="token builtin">bool</span><span class="token punctuation">)</span>
	<span class="token keyword">go</span> <span class="token keyword">func</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
		<span class="token keyword">for</span>  <span class="token punctuation">{</span>
			<span class="token keyword">select</span> <span class="token punctuation">{</span>
			<span class="token keyword">case</span> <span class="token operator">&lt;-</span>quit<span class="token punctuation">:</span>
                <span class="token keyword">return</span>
			<span class="token keyword">default</span><span class="token punctuation">:</span>
                <span class="token comment">// ...</span>
            <span class="token punctuation">}</span>
		<span class="token punctuation">}</span>
    <span class="token punctuation">}</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
	<span class="token comment">// ...</span>
	quit <span class="token operator">&lt;-</span> <span class="token boolean">true</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_5-如何在运行时检查变量类型" tabindex="-1"><a class="header-anchor" href="#_5-如何在运行时检查变量类型" aria-hidden="true">#</a> 5.如何在运行时检查变量类型</h3><p>类型开关(Type Switch)是在运行时检查变量类型的最佳方式。类型开关按类型 而不是值来评估变量。每个 Switch 至少包含一个 case 用作条件语句，如果没 有一个 case 为真，则执行 default。</p><h3 id="_6-go语言中的channel缓冲有什么特点" tabindex="-1"><a class="header-anchor" href="#_6-go语言中的channel缓冲有什么特点" aria-hidden="true">#</a> 6.Go语言中的Channel缓冲有什么特点？</h3><p>无缓冲的channel是同步的，有缓冲的channel是非同步的</p><h3 id="_7-go中channel-通道-有什么特点" tabindex="-1"><a class="header-anchor" href="#_7-go中channel-通道-有什么特点" aria-hidden="true">#</a> 7.Go中Channel（通道）有什么特点？</h3><ul><li>给一个nil的channel发送数据，会造成永久阻塞</li><li>从一个nil的channel接收数据，也会造成永久阻塞</li><li>给一个已经关闭的channel发送数据，会引起panic</li><li>从一个已经关闭的channel接收数据，如何缓冲区中为空，则返回一个零值</li></ul><h3 id="_8-go中同步锁有什么特点-作用是什么" tabindex="-1"><a class="header-anchor" href="#_8-go中同步锁有什么特点-作用是什么" aria-hidden="true">#</a> 8.Go中同步锁有什么特点？作用是什么？</h3><p>当一个goroutine获得Mutex后，其他协程只能等待Mutex释放。</p><p>RWMutex在读锁占用的情况下，会阻止写，但不会阻止读</p><p>在写锁占用情况下，会阻止其他goroutine进行读或者写操作</p><blockquote><p>同步锁的作用是保证资源在使用时的独有性，不会因为并发而导致数据错乱，保证系统的稳定性</p></blockquote>`,28),t=[o];function l(c,p){return a(),s("div",null,t)}const r=n(i,[["render",l],["__file","index.html.vue"]]);export{r as default};
