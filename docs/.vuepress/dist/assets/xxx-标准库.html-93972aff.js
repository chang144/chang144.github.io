import{_ as e,o as d,c as i,e as c}from"./app-c89e49fa.js";const s={},o=c(`<h1 id="xxx-go标准库" tabindex="-1"><a class="header-anchor" href="#xxx-go标准库" aria-hidden="true">#</a> xxx - Go标准库</h1><ul><li><code>unsafe</code></li><li><code>syscall</code>-<code>os</code>-<code>os/exec</code><ul><li><code>os</code></li><li><code>os/exec</code></li><li><code>syscall</code></li></ul></li><li><code>archive/tar</code>-<code>/zip-compress</code></li><li><code>fmt</code>-<code>io</code>-<code>bufio</code>-<code>path/filepath</code>-<code>flag</code><ul><li><code>fmt</code></li><li><code>io</code></li><li><code>path/filepath</code></li><li><code>flag</code></li><li><code>bufio</code></li></ul></li><li><code>strings</code>-<code>strconv</code>-<code>unicode</code>-<code>regexp</code>-<code>bytes</code><ul><li><code>regexp</code></li><li><code>strconv</code></li><li><code>strings</code></li><li><code>unicode</code></li><li><code>bytes</code></li></ul></li><li><code>math</code>-<code>math/cmath</code>-<code>math/big</code>-<code>math/rand</code>-<code>sort</code><ul><li><code>math</code></li><li><code>math/rand</code></li><li><code>math/big</code></li><li><code>sort</code></li></ul></li><li><code>container</code>-<code>/list-ring-heap</code><ul><li><code>list-ring-heap</code></li><li><code>container</code></li></ul></li><li><code>time</code>-<code>log</code><ul><li><code>log</code></li><li><code>time</code></li></ul></li><li><code>encoding/json</code>-<code>encoding/xml</code>-<code>text/template</code><ul><li><code>encoding/json</code></li><li><code>encoding/xml</code></li><li><code>text/template</code></li></ul></li><li><code>net</code>-<code>net/http</code>-<code>html</code><ul><li><code>net</code></li><li><code>http</code></li><li><code>html</code></li></ul></li><li><code>runtime</code>-<code>sync</code></li><li><code>reflect</code></li></ul><h2 id="unsafe" tabindex="-1"><a class="header-anchor" href="#unsafe" aria-hidden="true">#</a> unsafe</h2><p>包含一些打破Go语言“类型安全”的命令，一般的程序不需要使用，可用在C/C++程序的调用中</p><h2 id="syscall" tabindex="-1"><a class="header-anchor" href="#syscall" aria-hidden="true">#</a> syscall</h2><p>底层的外部包，提供了操作系统底层调用的基本接口</p><h2 id="os" tabindex="-1"><a class="header-anchor" href="#os" aria-hidden="true">#</a> os</h2><p>提供了一个平台无关性的操作系统功能接口，采用Unix设计</p><h2 id="os-exec" tabindex="-1"><a class="header-anchor" href="#os-exec" aria-hidden="true">#</a> os/exec</h2><p>提供我们运行外部操作系统命令和程序的方法</p><h2 id="strings" tabindex="-1"><a class="header-anchor" href="#strings" aria-hidden="true">#</a> strings</h2><p>Go中使用<code>strings</code>包来完成对字符串的主要操作</p><ul><li><code>HasPrefix</code>判断字符串<code>s</code>是否以<code>prefix</code>开头：<div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>strings.HasPrefix(s,prefix string) bool
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div></li><li><code>HasSuffix</code>判断字符串<code>s</code>是否以<code>suffix</code>结尾：<div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>strings.HasSuffix(s,suffix string) bool
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div></li><li><code>Contains</code>判断字符串<code>s</code>是否包含<code>substr</code><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>strings.Contains(s,substr string) bool
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div></li><li><code>Index</code>返回字符串<code>str</code>在字符串<code>s</code>中的索引(<code>str</code>的第一个字符的索引)，-1表示字符串<code>s</code>不包含字符串<code>str</code>：<div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>strings.Index(s, str string) int
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div></li><li><code>LastIndex</code>返回字符串<code>str</code>在字符串<code>s</code>中最后出现位置的索引(<code>str</code>的第一个字符的索引)，-1表示字符串<code>s</code>不包含字符串<code>str</code>：<div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>strings.LastIndex(s, str string) int
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div>如果<code>ch</code>是非ASCII编码的字符，使用下列的函数进行定位<div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>strings.IndexRune(s string, r rune) int
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div></li><li><code>Replace</code>用于将字符串<code>str</code>中的前<code>n</code>个字符串 <code>old</code>替换为字符串 <code>new</code>, 并返回一个新的字符串，如果<code>n=-1</code>则替换所有<code>old</code>为字符串<code>new</code>:<div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>strings.Replace(str, old, new, n) string
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div></li><li><code>Count</code>用于计算字符串<code>str</code>在字符串<code>s</code>中出现的非重叠次数：<div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>strings.Count(s, str string) int
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div></li><li><code>Repeat</code>用于重复<code>count</code>次字符串<code>s</code>并返回一个新的字符串：<div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>strings.Repeat(s string, count int) string
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div></li><li><code>ToLower</code>将字符串中的Unicode字符全部转换为相应的小写字符：<div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>strings.ToLower(s string) string
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div></li><li><code>ToUpper</code>将字符串中的Unicode字符全部转换为相应的大写字符：<div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>strings.ToUpper(s string) string
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div></li><li><code>TrimSpace</code>来剔除字符串开头和结尾的空包符号:<div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>strings.TrimSpace(s string) string
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div></li><li><code>Trim</code>剔除字符串开头和结尾的指定字符:<div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>strings.Trim(s, str string) string
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div></li><li><code>TrimLeft</code>剔除字符串开头的指定字符:<div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>strings.TrimLeft(str string) string
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div></li><li><code>TrimRight</code>剔除字符串结尾的指定字符:<div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>strings.TrimRight(str sting) string
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div></li><li><code>Fields</code>将会利用1个或者多个空白符号来作为动态长度的分隔符将字符串分割成若干小块，并返回一个Slice，如果字符串只包含空白符号，则返回以一个长度为0的slice：<div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>strings.Fields(s sting) []string
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div></li><li><code>Split</code>用于自定义分割符号来对指定字符串进行分割，同样返回slice<div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>strings.Split(s, sep string) []string
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div></li><li><code>Join</code>用于将元素类型为string的slice使用分割符号来拼接组成一个字符串：<div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>strings.Join(sl []string, sep string) string
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div></li><li><code>NewReader</code>用于生成一个<code>Reader</code>并读取字符串中的内容，然后返回指向该<code>Reader</code>的指针，从其它类型读取内容的函数还有： <ul><li><code>Read()</code>从[]btye中读取内容</li><li><code>ReadByte()</code>和<code>ReadRune()</code>从字符串中读取下一个byte或者rune</li></ul></li></ul><h2 id="strconv" tabindex="-1"><a class="header-anchor" href="#strconv" aria-hidden="true">#</a> strconv</h2><h2 id="time" tabindex="-1"><a class="header-anchor" href="#time" aria-hidden="true">#</a> time</h2><p><code>time.Time</code></p><p><code>time.Now()</code> // <code>t.Day()</code> <code>t.Minute()</code> <code>t.Year()</code></p><p><code>time.After</code></p><p><code>time.Ticker</code></p><p><code>time.Sleep(s Duration)</code></p><h2 id="bytes" tabindex="-1"><a class="header-anchor" href="#bytes" aria-hidden="true">#</a> bytes</h2><p>Go语言中bytes包专门用来解决<code>[]bytes</code>切片的操作方法，它与<code>strings</code>包十分类似</p>`,22),t=[o];function l(a,n){return d(),i("div",null,t)}const u=e(s,[["render",l],["__file","xxx-标准库.html.vue"]]);export{u as default};
